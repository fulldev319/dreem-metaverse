{
  "address": "0x50Fa9417Da528Ac8A2665217a74a6179f5f1eaeB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalType",
          "type": "string"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extensionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RealmLandsMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REALM_OWNER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_registeredTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accruedProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accruedTaxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftToAttachAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftToAttachId",
          "type": "uint256"
        }
      ],
      "name": "addExtension",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "extensionToAddProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotingEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extensionId",
          "type": "uint256"
        }
      ],
      "name": "getRealmLandsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "protocolParameters_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "distributionManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votingTime_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taxRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingConsensus",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftToAttachAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftToAttachId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extensionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalToExtension",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolParameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extensionTokenId",
          "type": "uint256"
        }
      ],
      "name": "removeExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "proposalType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "name": "setValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "voteForProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votingPowerByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAccruedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80f53106f5ca034c6760da7dcb2a78a86171c551188755f42089e1dd5eaed71e",
  "receipt": {
    "to": null,
    "from": "0x155a5d138EB739004F8a6314eFa78b1eCF087d74",
    "contractAddress": "0x50Fa9417Da528Ac8A2665217a74a6179f5f1eaeB",
    "transactionIndex": 27,
    "gasUsed": "5302267",
    "logsBloom": "0x
    "blockHash": "0x4f9e5f306a43f9c57c90121f8dc61e6f424709552876ce01446014220089505f",
    "transactionHash": "0x80f53106f5ca034c6760da7dcb2a78a86171c551188755f42089e1dd5eaed71e",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 24826247,
        "transactionHash": "0x80f53106f5ca034c6760da7dcb2a78a86171c551188755f42089e1dd5eaed71e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000155a5d138eb739004f8a6314efa78b1ecf087d74",
          "0x000000000000000000000000d56fbe3294ea4d73cca99ff8751ce7bd9b688cd5"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003f67f10802f2bf1000000000000000000000000000000000000000000000001c8f5a0435ec1b909000000000000000000000000000000000000000000000064a5575a816b8032e8000000000000000000000000000000000000000000000001c4ff2132de928d18000000000000000000000000000000000000000000000064a94dd991ebaf5ed9",
        "logIndex": 134,
        "blockHash": "0x4f9e5f306a43f9c57c90121f8dc61e6f424709552876ce01446014220089505f"
      }
    ],
    "blockNumber": 24826247,
    "cumulativeGasUsed": "10094387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "542ef83daf1db148ee73b32d5d318d81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RealmLandsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REALM_OWNER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_registeredTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accruedProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accruedTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftToAttachAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftToAttachId\",\"type\":\"uint256\"}],\"name\":\"addExtension\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extensionToAddProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"}],\"name\":\"getRealmLandsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolParameters_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributionManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingConsensus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftToAttachAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftToAttachId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalToExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionTokenId\",\"type\":\"uint256\"}],\"name\":\"removeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteForProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingPowerByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAccruedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExtension(address,uint256)\":{\"params\":{\"nftToAttachAddress\":\"address of the NFT to attach\",\"nftToAttachId\":\"ID of the NFT to attach\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_extensionRealmLands\":{\"details\":\"extension ID => realmLands address\"},\"_proposalToExtension\":{\"details\":\"remove extension proposal ID => extension ID\"},\"_proposalTypes\":{\"details\":\"proposal id => proposal type\"},\"_setProposalValues\":{\"details\":\"set values proposal id => value\"},\"extensionToAddProposal\":{\"details\":\"extension ID => add proposal ID\"},\"proposalToExtension\":{\"details\":\"add proposal ID => extension ID\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExtension(address,uint256)\":{\"notice\":\"Submit proposal to add an extension\"},\"removeExtension(uint256)\":{\"notice\":\"Submit proposal to remove an extension\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Realm.sol\":\"Realm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IProtocolParameters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n\\r\\ninterface IProtocolParameters {\\r\\n\\r\\n    function depositFee() external view returns(uint256);\\r\\n\\r\\n    function protocolFee() external view returns(uint256);\\r\\n\\r\\n    function feeCollector() external view returns(address);\\r\\n\\r\\n    function setDepositFee(uint256 depositFee_) external;\\r\\n\\r\\n    function setProtocolFee(uint256 protocolFee_) external;\\r\\n\\r\\n    function setSellerFee(address feeCollector_) external;\\r\\n}\",\"keccak256\":\"0x4ed094fa696012fc7f5a84af142140d2cc6a84aec0f982eee4100422e5965468\",\"license\":\"MIT\"},\"contracts/Realm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./IProtocolParameters.sol\\\";\\r\\nimport \\\"./Voting.sol\\\";\\r\\nimport \\\"./RealmLands.sol\\\";\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract Realm is ERC1155, Voting, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n\\r\\n    bytes32 public constant REALM_OWNER = keccak256(\\\"REALM_OWNER\\\");\\r\\n\\r\\n    enum ProposalTypes{\\r\\n        ADD,\\r\\n        REMOVE,\\r\\n        VOTING_CONSENSUS,\\r\\n        VOTING_TIME,\\r\\n        TAX_RATE,\\r\\n        CREATOR_SHARE\\r\\n    }\\r\\n\\r\\n    event ProposalSubmitted(\\r\\n        uint256 proposalId,\\r\\n        address owner,\\r\\n        string proposalType\\r\\n    );\\r\\n\\r\\n    event ProposalAccepted(\\r\\n        uint256 proposalId\\r\\n    );\\r\\n\\r\\n    event Voted(\\r\\n        uint256 proposalId,\\r\\n        address voter\\r\\n    );\\r\\n\\r\\n    event RealmLandsMinted(\\r\\n        uint256 extensionId,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    );\\r\\n\\r\\n    uint256 public taxRate;\\r\\n    uint256 private _tokenId;\\r\\n\\r\\n    /// @dev proposal id => proposal type\\r\\n    mapping (uint256 => ProposalTypes) private _proposalTypes;\\r\\n\\r\\n    /// @dev set values proposal id => value\\r\\n    mapping (uint256 => uint256) private _setProposalValues;\\r\\n\\r\\n    /// @dev extension ID => add proposal ID\\r\\n    mapping (uint256 => uint256) public extensionToAddProposal;\\r\\n\\r\\n    /// @dev add proposal ID => extension ID\\r\\n    mapping (uint256 => uint256) public proposalToExtension;\\r\\n\\r\\n    /// @dev remove extension proposal ID => extension ID\\r\\n    mapping (uint256 => uint256) private _proposalToExtension;\\r\\n\\r\\n    /// @dev extension ID => realmLands address\\r\\n    mapping (uint256 => address) private _extensionRealmLands;\\r\\n\\r\\n    mapping (address => mapping(uint256 => uint256)) private _deposits;\\r\\n\\r\\n    mapping (uint256 => ProposalData) private _proposals;\\r\\n\\r\\n    mapping (address => mapping(uint256 => bool)) public _registeredTokens;\\r\\n\\r\\n    address private _distributionManager;\\r\\n\\r\\n    address public protocolParameters;\\r\\n\\r\\n    uint256 public accruedProtocolFees;\\r\\n    uint256 public accruedTaxes;\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        address protocolParameters_,\\r\\n        string memory uri,\\r\\n        address caller,\\r\\n        address upgrader,\\r\\n        address distributionManager_,\\r\\n        uint256 votingTime_,\\r\\n        uint256 taxRate_,\\r\\n        uint256 creatorShare,\\r\\n        uint256 votingConsensus,\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) external initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, upgrader);\\r\\n        _setupRole(REALM_OWNER, caller);\\r\\n\\r\\n        _setURI(uri);\\r\\n        _setTaxRate(taxRate_);\\r\\n        _setCreatorShare(creatorShare);\\r\\n        _setCreatorAddress(caller);\\r\\n        _setVotingTime(votingTime_);\\r\\n        _createExtension(nftToAttachAddress, nftToAttachId, caller);\\r\\n\\r\\n        _setVotingConsensus(votingConsensus);\\r\\n\\r\\n        _distributionManager = distributionManager_;\\r\\n\\r\\n        protocolParameters = protocolParameters_;\\r\\n    }\\r\\n\\r\\n    function setValue(string memory proposalType, uint256 value_) public {\\r\\n\\r\\n        // Queue proposal for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        if (keccak256(bytes(proposalType)) == keccak256(bytes(\\\"VOTING_CONSENSUS\\\"))) {\\r\\n            // save proposal type\\r\\n            _proposalTypes[proposalId] = ProposalTypes.VOTING_CONSENSUS;\\r\\n        } else if (keccak256(bytes(proposalType)) == keccak256(bytes(\\\"VOTING_TIME\\\"))) {\\r\\n            // save proposal type\\r\\n            _proposalTypes[proposalId] = ProposalTypes.VOTING_TIME;\\r\\n        } else if (keccak256(bytes(proposalType)) == keccak256(bytes(\\\"TAX_RATE\\\"))) {\\r\\n            // save proposal type\\r\\n            _proposalTypes[proposalId] = ProposalTypes.TAX_RATE;\\r\\n        } else if (keccak256(bytes(proposalType)) == keccak256(bytes(\\\"CREATOR_SHARE\\\"))) {\\r\\n            // save proposal type\\r\\n            _proposalTypes[proposalId] = ProposalTypes.CREATOR_SHARE;\\r\\n        }\\r\\n\\r\\n        _setProposalValues[proposalId] = value_;\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            msg.sender,\\r\\n            proposalType\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Submit proposal to add an extension\\r\\n     * @param nftToAttachAddress address of the NFT to attach\\r\\n     * @param nftToAttachId ID of the NFT to attach\\r\\n     */\\r\\n    function addExtension(\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) public payable {\\r\\n        // Make sure that caller is owner of ERC721\\r\\n        address tokenOwner = IERC721Metadata(nftToAttachAddress).ownerOf(nftToAttachId);\\r\\n        //address approvedFor = IERC721Metadata(nftToAttachAddress).getApproved(nftToAttachId);\\r\\n\\r\\n        require(tokenOwner == msg.sender, \\\"You are not the owner!\\\");\\r\\n        //require(approvedFor == address(this), \\\"Realm should be approved!\\\");\\r\\n\\r\\n        // Queue proposal for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        _proposals[proposalId] = ProposalData(\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // save proposal type\\r\\n        _proposalTypes[proposalId] = ProposalTypes.ADD;\\r\\n\\r\\n        uint256 depositFee = IProtocolParameters(protocolParameters).depositFee();\\r\\n\\r\\n        if (depositFee > 0) {\\r\\n            require(msg.value == depositFee, \\\"msg.value should equal depositFee!\\\");\\r\\n\\r\\n            uint256 depositFeeRemaining = msg.value;\\r\\n\\r\\n            if (taxRate > 0) {\\r\\n                uint256 tax = msg.value * taxRate / 10000;\\r\\n                depositFeeRemaining -= tax;\\r\\n                accruedTaxes += tax;\\r\\n            }\\r\\n\\r\\n            uint256 protocolFee = IProtocolParameters(protocolParameters).protocolFee();\\r\\n\\r\\n            if (protocolFee > 0) {\\r\\n                uint256 protocolFeeValue = msg.value * protocolFee / 10000;\\r\\n                depositFeeRemaining -= protocolFeeValue;\\r\\n                accruedProtocolFees += protocolFeeValue;\\r\\n            }\\r\\n\\r\\n            _deposits[msg.sender][proposalId] += depositFeeRemaining;\\r\\n\\r\\n        }\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            msg.sender,\\r\\n            \\\"ADD\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawAccruedFunds() public {\\r\\n        payable(_distributionManager).transfer(accruedTaxes);\\r\\n        accruedTaxes = 0;\\r\\n\\r\\n        address feeCollector = IProtocolParameters(protocolParameters).feeCollector();\\r\\n        payable(feeCollector).transfer(accruedProtocolFees);\\r\\n        accruedProtocolFees = 0;\\r\\n    }\\r\\n    \\r\\n    /// @notice Submit proposal to remove an extension\\r\\n    function removeExtension(\\r\\n        uint256 extensionTokenId\\r\\n    ) public {\\r\\n\\r\\n        // Get add proposal ID to get token data\\r\\n        uint256 addProposalId = extensionToAddProposal[extensionTokenId];\\r\\n        // Get token data\\r\\n        (address tokenAddress, uint256 tokenId, address owner) = _getTokenData(addProposalId);\\r\\n\\r\\n        // Queue for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            owner\\r\\n        );\\r\\n\\r\\n        _proposals[proposalId] = ProposalData(\\r\\n            tokenAddress,\\r\\n            tokenId,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // Save data in mappings\\r\\n        _proposalTypes[proposalId] = ProposalTypes.REMOVE;\\r\\n        _proposalToExtension[proposalId] = extensionTokenId;\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            msg.sender,\\r\\n            \\\"REMOVE\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function voteForProposal(uint256 proposalId) external {\\r\\n        bool votingApproved = _voteForProposal(proposalId, msg.sender);\\r\\n\\r\\n        if (votingApproved) {\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.ADD) {\\r\\n\\r\\n                (address tokenAddress, uint256 tokenId, address proposer) = _getTokenData(proposalId);\\r\\n\\r\\n                uint256 newTokenId = _createExtension(tokenAddress, tokenId, proposer);\\r\\n\\r\\n                extensionToAddProposal[newTokenId] = proposalId;\\r\\n                proposalToExtension[proposalId] = newTokenId;\\r\\n\\r\\n                uint256 depositValue = _deposits[msg.sender][proposalId];\\r\\n                if (depositValue > 0) {\\r\\n                    payable(msg.sender).transfer(depositValue);\\r\\n                    _deposits[msg.sender][proposalId] = 0;\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.REMOVE) {\\r\\n                uint256 extensionId = _proposalToExtension[proposalId];\\r\\n\\r\\n                uint256 addProposalId = extensionToAddProposal[extensionId];\\r\\n\\r\\n                (address tokenAddress, uint256 tokenId, address owner) = _getTokenData(addProposalId);\\r\\n\\r\\n                _unattachNFT(tokenAddress, tokenId, owner, extensionId);\\r\\n\\r\\n                _removeVotingPower(owner);\\r\\n            }\\r\\n\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.VOTING_CONSENSUS) {\\r\\n\\r\\n                uint256 value_ = _setProposalValues[proposalId];\\r\\n\\r\\n                _setVotingConsensus(value_);\\r\\n\\r\\n            }\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.VOTING_TIME) {\\r\\n\\r\\n                uint256 value_ = _setProposalValues[proposalId];\\r\\n\\r\\n                _setVotingTime(value_);\\r\\n\\r\\n            }\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.TAX_RATE) {\\r\\n\\r\\n                uint256 value_ = _setProposalValues[proposalId];\\r\\n\\r\\n                _setTaxRate(value_);\\r\\n\\r\\n            }\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.CREATOR_SHARE) {\\r\\n\\r\\n                uint256 value_ = _setProposalValues[proposalId];\\r\\n\\r\\n                _setCreatorShare(value_);\\r\\n\\r\\n            }\\r\\n\\r\\n            emit ProposalAccepted(\\r\\n                proposalId\\r\\n            );\\r\\n\\r\\n        }\\r\\n\\r\\n        emit Voted(proposalId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _createExtension(address tokenAddress, uint256 tokenId, address owner) internal returns (uint256 newTokenId) {\\r\\n        newTokenId = _attachNFT(tokenAddress, tokenId, owner);\\r\\n\\r\\n        _addVotingPower(owner);\\r\\n        _createRealmLands(newTokenId);\\r\\n\\r\\n    }\\r\\n\\r\\n    function _createRealmLands(uint256 extensionId) internal {\\r\\n        address realmLands = address(new RealmLands());\\r\\n\\r\\n        _extensionRealmLands[extensionId] = realmLands;\\r\\n    }\\r\\n\\r\\n    function mintLand(uint256 extensionId, address to) public {\\r\\n        uint256 tokenBalance = balanceOf(msg.sender, extensionId);\\r\\n        require(tokenBalance > 0, \\\"You are not the owner of the extension\\\");\\r\\n\\r\\n        uint256 mintedTokenId = RealmLands(_extensionRealmLands[extensionId]).mint(to);\\r\\n\\r\\n        emit RealmLandsMinted(extensionId, to, mintedTokenId);\\r\\n    }\\r\\n\\r\\n    function _attachNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address from\\r\\n    ) internal returns(uint256) {\\r\\n\\r\\n        require(!_registeredTokens[collection][tokenId], \\\"Token already registered!\\\");\\r\\n        _registeredTokens[collection][tokenId] = true;\\r\\n\\r\\n        _tokenId += 1;\\r\\n\\r\\n        _mint(from, _tokenId, 1, \\\"\\\");\\r\\n\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function _unattachNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        uint256 extensionId\\r\\n    ) internal {\\r\\n\\r\\n        _registeredTokens[collection][tokenId] = false;\\r\\n\\r\\n        _burn(to, extensionId, 1);\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    function _setTaxRate(uint256 taxRate_) internal {\\r\\n        require(taxRate_ >= 0, \\\"taxRate must be >= than 0\\\");\\r\\n        require(taxRate_ < 10000, \\\"taxRate must be < than 10000\\\");\\r\\n        taxRate = taxRate_;\\r\\n    }\\r\\n\\r\\n    function getRealmLandsAddress(uint256 extensionId) public view returns (address) {\\r\\n        return _extensionRealmLands[extensionId];\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view override (Context, ContextUpgradeable) returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view override (Context, ContextUpgradeable) returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControlUpgradeable) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\\r\\n            interfaceId == type(IERC1155).interfaceId ||\\r\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\r\\n\\r\\n    function getDistributionManagerAddress() public view returns (address) {\\r\\n        return _distributionManager;\\r\\n    }\\r\\n\\r\\n    function _getTokenData(uint256 proposalId) internal view returns (address tokenAddress, uint256 tokenId, address owner) {\\r\\n        tokenAddress = _proposals[proposalId].tokenAddress;\\r\\n        tokenId = _proposals[proposalId].tokenId;\\r\\n        owner = _proposals[proposalId].owner;\\r\\n    }\\r\\n\\r\\n    function getProposalTokenAddress(uint256 proposalId) public view returns (address) {\\r\\n        return _proposals[proposalId].tokenAddress;\\r\\n    }\\r\\n\\r\\n    function getProposalTokenId(uint256 proposalId) public view returns (uint256) {\\r\\n        return _proposals[proposalId].tokenId;\\r\\n    }\\r\\n\\r\\n    function getProposalOwner(uint256 proposalId) public view returns (address) {\\r\\n        return _proposals[proposalId].owner;\\r\\n    }\\r\\n\\r\\n    function getDepositFee() public view returns (uint256) {\\r\\n        return IProtocolParameters(protocolParameters).depositFee();\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0e62d73e6f1abf9bea4e74fad7e1b66bc669fd378b288318b308c1dab5c784fb\",\"license\":\"MIT\"},\"contracts/RealmLands.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract RealmLands is ERC721, Ownable {\\r\\n\\r\\n    uint256 private tokenId;\\r\\n\\r\\n    // Token name\\r\\n    string private _proxiedName;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _proxiedSymbol;\\r\\n\\r\\n    constructor() ERC721(\\\"Realm Lands\\\", \\\"RLANDS\\\") {}\\r\\n\\r\\n    function mint(address to) public onlyOwner returns (uint256) {\\r\\n        uint256 mintedTokenId = tokenId;\\r\\n        tokenId += 1;\\r\\n        _safeMint(to, mintedTokenId);\\r\\n\\r\\n        return mintedTokenId;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _proxiedName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _proxiedSymbol;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xa16959965db7b03d63a2512b46c8fb96e274b0c27f4872e353b25f8ad8ceb0b5\",\"license\":\"MIT\"},\"contracts/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nstruct ProposalData{\\r\\n    address tokenAddress;\\r\\n    uint256 tokenId;\\r\\n    address owner;\\r\\n}\\r\\n\",\"keccak256\":\"0x2f24d8912d51ead03adf37ffc472a5371f4f30b58afc63bdd8989799c2989a06\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nabstract contract Voting {\\r\\n\\r\\n    uint256 private _votingProposalCounter;\\r\\n    uint256 public votingPower;\\r\\n    address private _creatorAddress;\\r\\n    uint256 private _creatorShare;\\r\\n    uint256 private _votingConsensus;\\r\\n    uint256 private _votingTime;\\r\\n\\r\\n    mapping (address => uint256) public votingPowerByAddress;\\r\\n\\r\\n    struct Proposal {\\r\\n        address owner;\\r\\n        uint256 votes;\\r\\n        uint256 votingEnd;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    mapping(address => mapping(uint256 => bool)) hasVotedForProposal;\\r\\n\\r\\n    function _addVotingPower(address owner) internal {\\r\\n        votingPower += 10000;\\r\\n\\r\\n        uint256 votingPowerOwner = 10000 - _creatorShare;\\r\\n\\r\\n        votingPowerByAddress[_creatorAddress] += _creatorShare;\\r\\n        votingPowerByAddress[owner] += votingPowerOwner;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _removeVotingPower(address owner) internal {\\r\\n\\r\\n        votingPower -= 10000;\\r\\n        uint256 votingPowerOwner = 10000 - _creatorShare;\\r\\n\\r\\n        votingPowerByAddress[_creatorAddress] -= _creatorShare;\\r\\n        votingPowerByAddress[owner] -= votingPowerOwner;\\r\\n    }\\r\\n\\r\\n    function _queueForVoting(\\r\\n        address caller\\r\\n    ) internal returns (uint256) {\\r\\n        _votingProposalCounter += 1;\\r\\n        \\r\\n        proposals[_votingProposalCounter] = Proposal(\\r\\n            caller,\\r\\n            0,\\r\\n            block.timestamp + _votingTime\\r\\n        );\\r\\n\\r\\n        return _votingProposalCounter;\\r\\n    }\\r\\n\\r\\n    function _voteForProposal(uint256 proposalId, address caller) internal returns (bool) {\\r\\n        require(\\r\\n            proposals[proposalId].votingEnd > 0, \\r\\n            \\\"Non existent proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            hasVotedForProposal[caller][proposalId] == false,\\r\\n            \\\"Can't vote for same proposal twice!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            proposals[proposalId].votingEnd > block.timestamp,\\r\\n            \\\"Proposal has expired\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            votingPowerByAddress[caller] > 0,\\r\\n            \\\"You do not have voting power\\\"\\r\\n        );\\r\\n\\r\\n        proposals[proposalId].votes += votingPowerByAddress[caller];\\r\\n\\r\\n        hasVotedForProposal[caller][proposalId] = true;\\r\\n\\r\\n        if (proposals[proposalId].votes > votingPower * _votingConsensus / 10000) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setCreatorAddress(\\r\\n        address creatorAddress\\r\\n    ) internal {\\r\\n        require(creatorAddress != address(0), \\\"creatorAddress can't be address zero\\\");\\r\\n        _creatorAddress = creatorAddress;\\r\\n    }\\r\\n\\r\\n    function _setCreatorShare(\\r\\n        uint256 creatorShare\\r\\n    ) internal {\\r\\n        require(creatorShare > 0, \\\"creatorShare must be > than 0\\\");\\r\\n        require(creatorShare < 10000, \\\"creatorShare must be =< 10000\\\");\\r\\n        _creatorShare = creatorShare;\\r\\n    }\\r\\n\\r\\n    function _setVotingConsensus(\\r\\n        uint256 votingConsensus\\r\\n    ) internal {\\r\\n        require(votingConsensus > 0, \\\"votingConsensus must be > than 0\\\");\\r\\n        require(votingConsensus <= 10000, \\\"votingConsensus must be =< 10000\\\");\\r\\n        _votingConsensus = votingConsensus;\\r\\n    }\\r\\n\\r\\n    function _setVotingTime(\\r\\n        uint256 votingTime\\r\\n    ) internal {\\r\\n        require(votingTime > 0, \\\"votingTime must be greater than zero\\\");\\r\\n        _votingTime = votingTime;\\r\\n    }\\r\\n\\r\\n    function getProposalVotingEnd(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].votingEnd;\\r\\n    }\\r\\n\\r\\n    function getProposalVotes(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].votes;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x27d4468c16e758067517b6ca529a128899d2927268c9f1d822ea3441703c0256\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b5060408051602081019091526000815262000033816200003a565b5062000136565b80516200004f90600290602084019062000053565b5050565b8280546200006190620000f9565b90600052602060002090601f016020900481019282620000855760008555620000d0565b82601f10620000a057805160ff1916838001178555620000d0565b82800160010185558215620000d0579182015b82811115620000d0578251825591602001919060010190620000b3565b50620000de929150620000e2565b5090565b5b80821115620000de5760008155600101620000e3565b600181811c908216806200010e57607f821691505b602082108114156200013057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c615f046200016a600039600081816110a6015281816110e9015281816113fb015261143e0152615f046000f3fe608060405260043610620002825760003560e01c80635ab24f591162000153578063a7ae593511620000c5578063e7d41f731162000084578063e7d41f73146200089e578063e985e9c514620008d4578063effa78231462000921578063f242432a1462000946578063f4b5157b146200096b578063ffad235f146200099f57600080fd5b8063a7ae593514620007ea578063ab42da83146200080b578063b920ef71146200083d578063b92a479e1462000862578063d547741f146200087957600080fd5b80638e31ac8511620001125780638e31ac85146200072457806391d1485414620007495780639e7e65b2146200076e578063a217fddf14620007ae578063a22cb46514620007c557600080fd5b80635ab24f59146200066157806377174f85146200069c578063771a3a1d14620006b45780637c2da7aa14620006cd5780637c6926ce14620006f257600080fd5b80632bb5edec11620001f957806337eae23411620001b857806337eae234146200058057806339997a0214620005995780634560eb5514620005ca57806347c6614014620005e25780634e1273f414620006165780634f1ef286146200064a57600080fd5b80632bb5edec14620004b15780632eb2c2d614620004ec5780632f2ff15d146200051157806336568abe14620005365780633659cfe6146200055b57600080fd5b80630de705b511620002465780630de705b514620003a55780630e89341c14620003bd57806317826ac414620003f157806319be726d1462000448578063248a9ca3146200047d57600080fd5b8062fdd58e1462000287578063013cf08b14620002bf57806301ffc9a7146200032f578063045c6ce014620003655780630cd1a5b6146200038c575b600080fd5b3480156200029457600080fd5b50620002ac620002a636600462003e85565b620009c2565b6040519081526020015b60405180910390f35b348015620002cc57600080fd5b5062000309620002de36600462003f85565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001620002b6565b3480156200033c57600080fd5b50620003546200034e36600462003fc5565b62000a5d565b6040519015158152602001620002b6565b3480156200037257600080fd5b506200038a6200038436600462003f85565b62000abd565b005b3480156200039957600080fd5b50620002ac6101145481565b348015620003b257600080fd5b50620002ac62000e29565b348015620003ca57600080fd5b50620003e2620003dc36600462003f85565b62000eb0565b604051620002b691906200424d565b348015620003fe57600080fd5b506200042f6200041036600462003f85565b600090815261011060205260409020600201546001600160a01b031690565b6040516001600160a01b039091168152602001620002b6565b3480156200045557600080fd5b50620002ac6200046736600462003f85565b6000908152610110602052604090206001015490565b3480156200048a57600080fd5b50620002ac6200049c36600462003f85565b60009081526071602052604090206001015490565b348015620004be57600080fd5b506200042f620004d036600462003f85565b600090815261010e60205260409020546001600160a01b031690565b348015620004f957600080fd5b506200038a6200050b36600462003c01565b62000f4c565b3480156200051e57600080fd5b506200038a6200053036600462003f9e565b62000fea565b3480156200054357600080fd5b506200038a6200055536600462003f9e565b62001019565b3480156200056857600080fd5b506200038a6200057a36600462003b86565b6200109b565b3480156200058d57600080fd5b50620002ac6101155481565b348015620005a657600080fd5b50620002ac620005b836600462003b86565b60096020526000908152604090205481565b348015620005d757600080fd5b506200038a62001170565b348015620005ef57600080fd5b50620002ac6200060136600462003f85565b6000908152600a602052604090206001015490565b3480156200062357600080fd5b506200063b6200063536600462003eb3565b62001281565b604051620002b691906200420f565b6200038a6200065b36600462003d5d565b620013f0565b3480156200066e57600080fd5b506200042f6200068036600462003f85565b600090815261011060205260409020546001600160a01b031690565b348015620006a957600080fd5b50620002ac60045481565b348015620006c157600080fd5b50620002ac6101075481565b348015620006da57600080fd5b506200038a620006ec36600462004003565b620014b2565b348015620006ff57600080fd5b50620002ac6200071136600462003f85565b61010c6020526000908152604090205481565b3480156200073157600080fd5b506200038a6200074336600462003f9e565b620016e6565b3480156200075657600080fd5b50620003546200076836600462003f9e565b62001839565b3480156200077b57600080fd5b50620003546200078d36600462003e85565b61011160209081526000928352604080842090915290825290205460ff1681565b348015620007bb57600080fd5b50620002ac600081565b348015620007d257600080fd5b506200038a620007e436600462003d28565b62001864565b348015620007f757600080fd5b50610112546001600160a01b03166200042f565b3480156200081857600080fd5b50620002ac6200082a36600462003f85565b61010b6020526000908152604090205481565b3480156200084a57600080fd5b506200038a6200085c36600462003f85565b62001871565b6200038a6200087336600462003e85565b6200198e565b3480156200088657600080fd5b506200038a6200089836600462003f9e565b62001d80565b348015620008ab57600080fd5b50620002ac7f4b93cc127ac8aa5ae29c895d6f8256127b3ad24896e9757367f2697703340ef181565b348015620008e157600080fd5b5062000354620008f336600462003bc4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156200092e57600080fd5b506200038a6200094036600462003db1565b62001daa565b3480156200095357600080fd5b506200038a6200096536600462003cb9565b62001f43565b3480156200097857600080fd5b50620002ac6200098a36600462003f85565b6000908152600a602052604090206002015490565b348015620009ac57600080fd5b50610113546200042f906001600160a01b031681565b60006001600160a01b03831662000a345760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216637965db0b60e01b148062000a8f57506001600160e01b03198216636cdb3d1360e11b145b8062000aab57506001600160e01b031982166303a24d0760e21b145b8062000a57575062000a578262001fd1565b600062000acb823362002008565b9050801562000ded576000828152610109602052604081205460ff16600581111562000b0757634e487b7160e01b600052602160045260246000fd5b141562000bc657600080600062000b1e856200225d565b925092509250600062000b338484846200228a565b600081815261010b602090815260408083208a905589835261010c825280832084905533835261010f82528083208a8452909152902054909150801562000bc057604051339082156108fc029083906000818181858888f1935050505015801562000ba2573d6000803e3d6000fd5b5033600090815261010f602090815260408083208a84529091528120555b50505050505b60016000838152610109602052604090205460ff16600581111562000bfb57634e487b7160e01b600052602160045260246000fd5b141562000c5557600082815261010d602090815260408083205480845261010b9092528220549091808062000c30846200225d565b92509250925062000c4483838388620022b8565b62000c4f81620022f8565b50505050505b60026000838152610109602052604090205460ff16600581111562000c8a57634e487b7160e01b600052602160045260246000fd5b141562000cae57600082815261010a602052604090205462000cac8162002390565b505b60036000838152610109602052604090205460ff16600581111562000ce357634e487b7160e01b600052602160045260246000fd5b141562000d0757600082815261010a602052604090205462000d05816200243b565b505b60046000838152610109602052604090205460ff16600581111562000d3c57634e487b7160e01b600052602160045260246000fd5b141562000d6057600082815261010a602052604090205462000d5e816200249e565b505b60056000838152610109602052604090205460ff16600581111562000d9557634e487b7160e01b600052602160045260246000fd5b141562000db957600082815261010a602052604090205462000db781620024f7565b505b6040518281527fd24c2047577899547bacebb29e319fc7d73f6712b5adb401d45556f34bb2aa3b9060200160405180910390a15b604080518381523360208201527f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b910160405180910390a15050565b61011354604080516367a5279360e01b815290516000926001600160a01b0316916367a52793916004808301926020929190829003018186803b15801562000e7057600080fd5b505afa15801562000e85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eab91906200404a565b905090565b60606002805462000ec19062004530565b80601f016020809104026020016040519081016040528092919081815260200182805462000eef9062004530565b801562000f405780601f1062000f145761010080835404028352916020019162000f40565b820191906000526020600020905b81548152906001019060200180831162000f2257829003601f168201915b50505050509050919050565b6001600160a01b03851633148062000f6b575062000f6b8533620008f3565b62000fd45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840162000a2b565b62000fe38585858585620025a1565b5050505050565b600082815260716020526040902060010154620010088133620027ae565b6200101483836200281d565b505050565b6001600160a01b03811633146200108b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000a2b565b620010978282620028a7565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620010e75760405162461bcd60e51b815260040162000a2b90620042aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200111b62002911565b6001600160a01b031614620011445760405162461bcd60e51b815260040162000a2b90620042f6565b6200114f816200293f565b604080516000808252602082019092526200116d918391906200294d565b50565b61011254610115546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015620011af573d6000803e3d6000fd5b50600061011581905561011354604080516331056e5760e21b815290516001600160a01b039092169163c415b95c91600480820192602092909190829003018186803b158015620011ff57600080fd5b505afa15801562001214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123a919062003ba5565b610114546040519192506001600160a01b0383169181156108fc0291906000818181858888f1935050505015801562001277573d6000803e3d6000fd5b5050600061011455565b60608151835114620012e85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840162000a2b565b6000835167ffffffffffffffff8111156200131357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200133d578160200160208202803683370190505b50905060005b8451811015620013e857620013a98582815181106200137257634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106200139b57634e487b7160e01b600052603260045260246000fd5b6020026020010151620009c2565b828281518110620013ca57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152620013e0816200459d565b905062001343565b509392505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156200143c5760405162461bcd60e51b815260040162000a2b90620042aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200147062002911565b6001600160a01b031614620014995760405162461bcd60e51b815260040162000a2b90620042f6565b620014a4826200293f565b62001097828260016200294d565b6000620014bf3362002aa2565b60408051808201909152601081526f564f54494e475f434f4e53454e53555360801b6020918201528451908501209091507f90bae06ed050f61c5bcd9c1831c5f1ddf19a474d9c0f4359a5c5b110de956fa51415620015405760008181526101096020526040902080546002919060ff19166001835b021790555062001691565b60408051808201909152600b81526a564f54494e475f54494d4560a81b6020918201528351908401207fffd9d5c75037d8ede2039955964afad2be2b48f8ec892901c4de54028618f6481415620015b35760008181526101096020526040902080546003919060ff191660018362001535565b6040805180820190915260088152675441585f5241544560c01b6020918201528351908401207f0371307e20e39e9a6190879932367c0d0430f17b83cb4f5c3bf0fbd6bbe5288e1415620016235760008181526101096020526040902080546004919060ff191660018362001535565b60408051808201909152600d81526c43524541544f525f534841524560981b6020918201528351908401207f133a53f2115957806ccedd49f89e68736297e7bac83f1be18c7cded25cc8af9c14156200169157600081815261010960205260409020805460ff191660051790555b600081815261010a602052604090819020839055517fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d6517990620016d9908390339087906200441c565b60405180910390a1505050565b6000620016f43384620009c2565b905060008111620017575760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652065787460448201526532b739b4b7b760d11b606482015260840162000a2b565b600083815261010e60205260408082205490516335313c2160e11b81526001600160a01b03858116600483015290911690636a62784290602401602060405180830381600087803b158015620017ac57600080fd5b505af1158015620017c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017e791906200404a565b604080518681526001600160a01b03861660208201529081018290529091507f6af2462550ffcec7e156c83737e7c6937b7a88fba6b455739891c1b2d956dea69060600160405180910390a150505050565b60009182526071602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6200109733838362002b41565b600081815261010b60205260408120549080806200188f846200225d565b9250925092506000620018a28262002aa2565b60408051606080820183526001600160a01b03888116835260208084018981523385870181815260008981526101108552888120975188549087166001600160a01b031991821617895593516001808a01919091559151600290980180549890961697909316969096179093556101098252858120805460ff191690951790945561010d8152928490208b90558351858152928301529181018290526006918101919091526552454d4f564560d01b60808201529091507fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d651799060a00160405180910390a1505050505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b158015620019d257600080fd5b505afa158015620019e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a0d919062003ba5565b90506001600160a01b038116331462001a625760405162461bcd60e51b8152602060048201526016602482015275596f7520617265206e6f7420746865206f776e65722160501b604482015260640162000a2b565b600062001a6f3362002aa2565b604080516060810182526001600160a01b03878116825260208083018881523384860190815260008781526101108452868120955186549086166001600160a01b031991821617875592516001870155905160029095018054958516959092169490941790556101098152838320805460ff191690556101135484516367a5279360e01b81529451959650929492909116926367a527939260048083019392829003018186803b15801562001b2357600080fd5b505afa15801562001b38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b5e91906200404a565b9050801562001d265780341462001bc35760405162461bcd60e51b815260206004820152602260248201527f6d73672e76616c75652073686f756c6420657175616c206465706f7369744665604482015261652160f01b606482015260840162000a2b565b6101075434901562001c1d576000612710610107543462001be59190620044ab565b62001bf191906200448a565b905062001bff8183620044cd565b915080610115600082825462001c1691906200446f565b9091555050505b61011354604080516358710f4560e11b815290516000926001600160a01b03169163b0e21e8a916004808301926020929190829003018186803b15801562001c6457600080fd5b505afa15801562001c79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c9f91906200404a565b9050801562001cf157600061271062001cb98334620044ab565b62001cc591906200448a565b905062001cd38184620044cd565b925080610114600082825462001cea91906200446f565b9091555050505b33600090815261010f602090815260408083208784529091528120805484929062001d1e9084906200446f565b909155505050505b6040805183815233602082015260608183018190526003908201526210511160ea1b608082015290517fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d651799181900360a00190a15050505050565b60008281526071602052604090206001015462001d9e8133620027ae565b620010148383620028a7565b600c54610100900460ff1662001dc757600c5460ff161562001dcb565b303b155b62001e305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000a2b565b600c54610100900460ff1615801562001e5357600c805461ffff19166101011790555b62001e5d62002c24565b62001e6762002c6e565b62001e7460008a62002c98565b62001ea07f4b93cc127ac8aa5ae29c895d6f8256127b3ad24896e9757367f2697703340ef18b62002c98565b62001eab8b62002ca4565b62001eb6866200249e565b62001ec185620024f7565b62001ecc8a62002cb9565b62001ed7876200243b565b62001ee483838c6200228a565b5062001ef08462002390565b61011280546001600160a01b03808b166001600160a01b0319928316179092556101138054928f1692909116919091179055801562001f3557600c805461ff00191690555b505050505050505050505050565b6001600160a01b03851633148062001f62575062001f628533620008f3565b62001fc25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840162000a2b565b62000fe3858585858562002d3f565b60006001600160e01b03198216637965db0b60e01b148062000a5757506301ffc9a760e01b6001600160e01b031983161462000a57565b6000828152600a6020526040812060020154620020605760405162461bcd60e51b8152602060048201526015602482015274139bdb88195e1a5cdd195b9d081c1c9bdc1bdcd85b605a1b604482015260640162000a2b565b6001600160a01b0382166000908152600b6020908152604080832086845290915290205460ff1615620020e25760405162461bcd60e51b815260206004820152602360248201527f43616e277420766f746520666f722073616d652070726f706f73616c2074776960448201526263652160e81b606482015260840162000a2b565b6000838152600a602052604090206002015442106200213b5760405162461bcd60e51b8152602060048201526014602482015273141c9bdc1bdcd85b081a185cc8195e1c1a5c995960621b604482015260640162000a2b565b6001600160a01b038216600090815260096020526040902054620021a25760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206861766520766f74696e6720706f77657200000000604482015260640162000a2b565b6001600160a01b038216600090815260096020908152604080832054868452600a9092528220600101805491929091620021de9084906200446f565b90915550506001600160a01b0382166000908152600b602090815260408083208684529091529020805460ff19166001179055600754600454612710916200222691620044ab565b6200223291906200448a565b6000848152600a60205260409020600101541115620022545750600162000a57565b50600062000a57565b600090815261011060205260409020805460018201546002909201546001600160a01b0391821693911690565b60006200229984848462002e74565b9050620022a68262002f67565b620022b18162002ff6565b9392505050565b6001600160a01b0384166000908152610111602090815260408083208684529091529020805460ff19169055620022f28282600162003055565b50505050565b612710600460008282546200230e9190620044cd565b90915550506006546000906200232790612710620044cd565b6006546005546001600160a01b031660009081526009602052604081208054939450919262002358908490620044cd565b90915550506001600160a01b0382166000908152600960205260408120805483929062002387908490620044cd565b90915550505050565b60008111620023e25760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203e207468616e2030604482015260640162000a2b565b612710811115620024365760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203d3c203130303030604482015260640162000a2b565b600755565b60008111620024995760405162461bcd60e51b8152602060048201526024808201527f766f74696e6754696d65206d7573742062652067726561746572207468616e206044820152637a65726f60e01b606482015260840162000a2b565b600855565b6127108110620024f15760405162461bcd60e51b815260206004820152601c60248201527f74617852617465206d757374206265203c207468616e20313030303000000000604482015260640162000a2b565b61010755565b60008111620025495760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203e207468616e2030000000604482015260640162000a2b565b61271081106200259c5760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203d3c203130303030000000604482015260640162000a2b565b600655565b8151835114620026055760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840162000a2b565b6001600160a01b0384166200262e5760405162461bcd60e51b815260040162000a2b9062004342565b3360005b84518110156200273c5760008582815181106200265f57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106200268c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015620026df5760405162461bcd60e51b815260040162000a2b9062004387565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906200271e9084906200446f565b925050819055505050508062002734906200459d565b905062002632565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516200278e92919062004224565b60405180910390a4620027a6818787878787620031d8565b505050505050565b620027ba828262001839565b6200109757620027d5816001600160a01b0316601462003358565b620027e283602062003358565b604051602001620027f5929190620040eb565b60408051601f198184030181529082905262461bcd60e51b825262000a2b916004016200424d565b62002829828262001839565b620010975760008281526071602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620028633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b620028b3828262001839565b15620010975760008281526071602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6000620010978133620027ae565b60006200295962002911565b905062002966846200354e565b600083511180620029745750815b156200298857620029868484620035f5565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1662000fe357805460ff191660011781556040516001600160a01b038316602482015262002a0a90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052620035f5565b50805460ff1916815562002a1d62002911565b6001600160a01b0316826001600160a01b03161462002a975760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840162000a2b565b62000fe385620036e9565b600060016003600082825462002ab991906200446f565b925050819055506040518060600160405280836001600160a01b03168152602001600081526020016008544262002af191906200446f565b9052600380546000908152600a6020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559201516002909201919091555492915050565b816001600160a01b0316836001600160a01b0316141562002bb75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840162000a2b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600c54610100900460ff1662002c4e5760405162461bcd60e51b815260040162000a2b90620043d1565b62002c586200372b565b62002c626200372b565b62002c6c6200372b565b565b600c54610100900460ff1662002c585760405162461bcd60e51b815260040162000a2b90620043d1565b6200109782826200281d565b805162001097906002906020840190620039ce565b6001600160a01b03811662002d1d5760405162461bcd60e51b8152602060048201526024808201527f63726561746f72416464726573732063616e27742062652061646472657373206044820152637a65726f60e01b606482015260840162000a2b565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03841662002d685760405162461bcd60e51b815260040162000a2b9062004342565b3362002d8681878762002d7b8862003755565b62000fe38862003755565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101562002dca5760405162461bcd60e51b815260040162000a2b9062004387565b6000858152602081815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929062002e099084906200446f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a462002e6b828888888888620037af565b50505050505050565b6001600160a01b03831660009081526101116020908152604080832085845290915281205460ff161562002eeb5760405162461bcd60e51b815260206004820152601960248201527f546f6b656e20616c726561647920726567697374657265642100000000000000604482015260640162000a2b565b6001600160a01b0384166000908152610111602090815260408083208684529091528120805460ff1916600190811790915561010880549192909162002f339084906200446f565b9250508190555062002f5b826101085460016040518060200160405280600081525062003886565b50610108549392505050565b6127106004600082825462002f7d91906200446f565b909155505060065460009062002f9690612710620044cd565b6006546005546001600160a01b031660009081526009602052604081208054939450919262002fc79084906200446f565b90915550506001600160a01b03821660009081526009602052604081208054839290620023879084906200446f565b6000604051620030069062003a5d565b604051809103906000f08015801562003023573d6000803e3d6000fd5b50600092835261010e602052604090922080546001600160a01b0319166001600160a01b039093169290921790915550565b6001600160a01b038316620030b95760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840162000a2b565b33620030ee81856000620030cd8762003755565b620030d88762003755565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156200316d5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840162000a2b565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15620027a65760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906200321f908990899088908890889060040162004164565b602060405180830381600087803b1580156200323a57600080fd5b505af19250505080156200326d575060408051601f3d908101601f191682019092526200326a9181019062003fe4565b60015b62003325576200327c620045e7565b806308c379a01415620032bd57506200329462004600565b80620032a15750620032bf565b8060405162461bcd60e51b815260040162000a2b91906200424d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840162000a2b565b6001600160e01b0319811663bc197c8160e01b1462002e6b5760405162461bcd60e51b815260040162000a2b9062004262565b6060600062003369836002620044ab565b620033769060026200446f565b67ffffffffffffffff8111156200339d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620033c8576020820181803683370190505b509050600360fc1b81600081518110620033f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200343057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062003456846002620044ab565b620034639060016200446f565b90505b6001811115620034fd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620034a757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620034cc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620034f58162004516565b905062003466565b508315620022b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000a2b565b803b620035b45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000a2b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b620036565760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000a2b565b600080846001600160a01b031684604051620036739190620040cd565b600060405180830381855af49150503d8060008114620036b0576040519150601f19603f3d011682016040523d82523d6000602084013e620036b5565b606091505b5091509150620036e0828260405180606001604052806027815260200162005ea86027913962003990565b95945050505050565b620036f4816200354e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600c54610100900460ff1662002c6c5760405162461bcd60e51b815260040162000a2b90620043d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106200379e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15620027a65760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620037f69089908990889088908890600401620041c8565b602060405180830381600087803b1580156200381157600080fd5b505af192505050801562003844575060408051601f3d908101601f19168201909252620038419181019062003fe4565b60015b62003853576200327c620045e7565b6001600160e01b0319811663f23a6e6160e01b1462002e6b5760405162461bcd60e51b815260040162000a2b9062004262565b6001600160a01b038416620038e85760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840162000a2b565b33620038fc8160008762002d7b8862003755565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906200392e9084906200446f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a462000fe381600087878787620037af565b60608315620039a1575081620022b1565b825115620039b25782518084602001fd5b8160405162461bcd60e51b815260040162000a2b91906200424d565b828054620039dc9062004530565b90600052602060002090601f01602090048101928262003a00576000855562003a4b565b82601f1062003a1b57805160ff191683800117855562003a4b565b8280016001018555821562003a4b579182015b8281111562003a4b57825182559160200191906001019062003a2e565b5062003a5992915062003a6b565b5090565b6117ea80620046be83390190565b5b8082111562003a59576000815560010162003a6c565b803562003a8f8162004690565b919050565b600082601f83011262003aa5578081fd5b8135602062003ab48262004448565b60405162003ac382826200456d565b8381528281019150858301600585901b8701840188101562003ae3578586fd5b855b8581101562003b035781358452928401929084019060010162003ae5565b5090979650505050505050565b600082601f83011262003b21578081fd5b813567ffffffffffffffff81111562003b3e5762003b3e620045d1565b60405162003b57601f8301601f1916602001826200456d565b81815284602083860101111562003b6c578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121562003b98578081fd5b8135620022b18162004690565b60006020828403121562003bb7578081fd5b8151620022b18162004690565b6000806040838503121562003bd7578081fd5b823562003be48162004690565b9150602083013562003bf68162004690565b809150509250929050565b600080600080600060a0868803121562003c19578081fd5b853562003c268162004690565b9450602086013562003c388162004690565b9350604086013567ffffffffffffffff8082111562003c55578283fd5b62003c6389838a0162003a94565b9450606088013591508082111562003c79578283fd5b62003c8789838a0162003a94565b9350608088013591508082111562003c9d578283fd5b5062003cac8882890162003b10565b9150509295509295909350565b600080600080600060a0868803121562003cd1578081fd5b853562003cde8162004690565b9450602086013562003cf08162004690565b93506040860135925060608601359150608086013567ffffffffffffffff81111562003d1a578182fd5b62003cac8882890162003b10565b6000806040838503121562003d3b578182fd5b823562003d488162004690565b91506020830135801515811462003bf6578182fd5b6000806040838503121562003d70578182fd5b823562003d7d8162004690565b9150602083013567ffffffffffffffff81111562003d99578182fd5b62003da78582860162003b10565b9150509250929050565b60008060008060008060008060008060006101608c8e03121562003dd3578889fd5b8b3562003de08162004690565b9a5060208c013567ffffffffffffffff81111562003dfc57898afd5b62003e0a8e828f0162003b10565b9a505060408c013562003e1d8162004690565b985062003e2d60608d0162003a82565b975062003e3d60808d0162003a82565b965060a08c0135955060c08c0135945060e08c013593506101008c0135925062003e6b6101208d0162003a82565b91506101408c013590509295989b509295989b9093969950565b6000806040838503121562003e98578182fd5b823562003ea58162004690565b946020939093013593505050565b6000806040838503121562003ec6578182fd5b823567ffffffffffffffff8082111562003ede578384fd5b818501915085601f83011262003ef2578384fd5b8135602062003f018262004448565b60405162003f1082826200456d565b8381528281019150858301600585901b870184018b101562003f30578889fd5b8896505b8487101562003f5f57803562003f4a8162004690565b83526001969096019591830191830162003f34565b509650508601359250508082111562003f76578283fd5b5062003da78582860162003a94565b60006020828403121562003f97578081fd5b5035919050565b6000806040838503121562003fb1578182fd5b82359150602083013562003bf68162004690565b60006020828403121562003fd7578081fd5b8135620022b181620046a6565b60006020828403121562003ff6578081fd5b8151620022b181620046a6565b6000806040838503121562004016578182fd5b823567ffffffffffffffff8111156200402d578283fd5b6200403b8582860162003b10565b95602094909401359450505050565b6000602082840312156200405c578081fd5b5051919050565b6000815180845260208085019450808401835b83811015620040945781518752958201959082019060010162004076565b509495945050505050565b60008151808452620040b9816020860160208601620044e7565b601f01601f19169290920160200192915050565b60008251620040e1818460208701620044e7565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162004125816017850160208801620044e7565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162004158816028840160208801620044e7565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090620041929083018662004063565b8281036060840152620041a6818662004063565b90508281036080840152620041bc81856200409f565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062004204908301846200409f565b979650505050505050565b602081526000620022b1602083018462004063565b60408152600062004239604083018562004063565b8281036020840152620036e0818562004063565b602081526000620022b160208301846200409f565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8381526001600160a01b0383166020820152606060408201819052600090620036e0908301846200409f565b600067ffffffffffffffff821115620044655762004465620045d1565b5060051b60200190565b60008219821115620044855762004485620045bb565b500190565b600082620044a657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620044c857620044c8620045bb565b500290565b600082821015620044e257620044e2620045bb565b500390565b60005b8381101562004504578181015183820152602001620044ea565b83811115620022f25750506000910152565b600081620045285762004528620045bb565b506000190190565b600181811c908216806200454557607f821691505b602082108114156200456757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715620045965762004596620045d1565b6040525050565b6000600019821415620045b457620045b4620045bb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115620045fd57600481823e5160e01c5b90565b600060443d10156200460f5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156200464057505050505090565b8285019150815181811115620046595750505050505090565b843d8701016020828501011115620046745750505050505090565b62004685602082860101876200456d565b509095945050505050565b6001600160a01b03811681146200116d57600080fd5b6001600160e01b0319811681146200116d57600080fdfe60806040523480156200001157600080fd5b50604080518082018252600b81526a5265616c6d204c616e647360a81b602080830191825283518085019094526006845265524c414e445360d01b9084015281519192916200006391600091620000f2565b50805162000079906001906020840190620000f2565b50505062000096620000906200009c60201b60201c565b620000a0565b620001d5565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001009062000198565b90600052602060002090601f0160209004810192826200012457600085556200016f565b82601f106200013f57805160ff19168380011785556200016f565b828001600101855582156200016f579182015b828111156200016f57825182559160200191906001019062000152565b506200017d92915062000181565b5090565b5b808211156200017d576000815560010162000182565b600181811c90821680620001ad57607f821691505b60208210811415620001cf57634e487b7160e01b600052602260045260246000fd5b50919050565b61160580620001e56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb4651461021b578063b88d4fde1461022e578063c87b56dd14610241578063e985e9c514610254578063f2fde38b1461029057600080fd5b806370a08231146101e7578063715018a6146101fa5780638da5cb5b1461020257806395d89b411461021357600080fd5b806323b872dd116100de57806323b872dd1461018d57806342842e0e146101a05780636352211e146101b35780636a627842146101c657600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e3660046112cb565b6102a3565b60405190151581526020015b60405180910390f35b6101406102f5565b60405161012f91906113b3565b61016061015b366004611303565b610387565b6040516001600160a01b03909116815260200161012f565b61018b6101863660046112a2565b610421565b005b61018b61019b366004611158565b610537565b61018b6101ae366004611158565b610568565b6101606101c1366004611303565b610583565b6101d96101d436600461110c565b6105fa565b60405190815260200161012f565b6101d96101f536600461110c565b610650565b61018b6106d7565b6006546001600160a01b0316610160565b61014061070d565b61018b610229366004611268565b61071c565b61018b61023c366004611193565b61072b565b61014061024f366004611303565b610763565b610123610262366004611126565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61018b61029e36600461110c565b61084b565b60006001600160e01b031982166380ac58cd60e01b14806102d457506001600160e01b03198216635b5e139f60e01b145b806102ef57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600880546103049061150d565b80601f01602080910402602001604051908101604052809291908181526020018280546103309061150d565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061042c82610583565b9050806001600160a01b0316836001600160a01b0316141561049a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016103fc565b336001600160a01b03821614806104b657506104b68133610262565b6105285760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016103fc565b61053283836108e6565b505050565b6105413382610954565b61055d5760405162461bcd60e51b81526004016103fc9061144d565b610532838383610a4b565b6105328383836040518060200160405280600081525061072b565b6000818152600260205260408120546001600160a01b0316806102ef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016103fc565b6006546000906001600160a01b031633146106275760405162461bcd60e51b81526004016103fc90611418565b6007805490600190600061063b838561149e565b909155506102ef90508382610beb565b919050565b60006001600160a01b0382166106bb5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103fc565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146107015760405162461bcd60e51b81526004016103fc90611418565b61070b6000610c05565b565b6060600980546103049061150d565b610727338383610c57565b5050565b6107353383610954565b6107515760405162461bcd60e51b81526004016103fc9061144d565b61075d84848484610d26565b50505050565b6000818152600260205260409020546060906001600160a01b03166107e25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103fc565b60006107f960408051602081019091526000815290565b905060008151116108195760405180602001604052806000815250610844565b8061082384610d59565b604051602001610834929190611347565b6040516020818303038152906040525b9392505050565b6006546001600160a01b031633146108755760405162461bcd60e51b81526004016103fc90611418565b6001600160a01b0381166108da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103fc565b6108e381610c05565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061091b82610583565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109cd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016103fc565b60006109d883610583565b9050806001600160a01b0316846001600160a01b03161480610a135750836001600160a01b0316610a0884610387565b6001600160a01b0316145b80610a4357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610a5e82610583565b6001600160a01b031614610ac65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016103fc565b6001600160a01b038216610b285760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103fc565b610b336000826108e6565b6001600160a01b0383166000908152600360205260408120805460019290610b5c9084906114ca565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b8a90849061149e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610727828260405180602001604052806000815250610e73565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610cb95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103fc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610d31848484610a4b565b610d3d84848484610ea6565b61075d5760405162461bcd60e51b81526004016103fc906113c6565b606081610d7d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610da75780610d9181611548565b9150610da09050600a836114b6565b9150610d81565b60008167ffffffffffffffff811115610dd057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610dfa576020820181803683370190505b5090505b8415610a4357610e0f6001836114ca565b9150610e1c600a86611563565b610e2790603061149e565b60f81b818381518110610e4a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610e6c600a866114b6565b9450610dfe565b610e7d8383610fb3565b610e8a6000848484610ea6565b6105325760405162461bcd60e51b81526004016103fc906113c6565b60006001600160a01b0384163b15610fa857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610eea903390899088908890600401611376565b602060405180830381600087803b158015610f0457600080fd5b505af1925050508015610f34575060408051601f3d908101601f19168201909252610f31918101906112e7565b60015b610f8e573d808015610f62576040519150601f19603f3d011682016040523d82523d6000602084013e610f67565b606091505b508051610f865760405162461bcd60e51b81526004016103fc906113c6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a43565b506001949350505050565b6001600160a01b0382166110095760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103fc565b6000818152600260205260409020546001600160a01b03161561106e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103fc565b6001600160a01b038216600090815260036020526040812080546001929061109790849061149e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b038116811461064b57600080fd5b60006020828403121561111d578081fd5b610844826110f5565b60008060408385031215611138578081fd5b611141836110f5565b915061114f602084016110f5565b90509250929050565b60008060006060848603121561116c578081fd5b611175846110f5565b9250611183602085016110f5565b9150604084013590509250925092565b600080600080608085870312156111a8578081fd5b6111b1856110f5565b93506111bf602086016110f5565b925060408501359150606085013567ffffffffffffffff808211156111e2578283fd5b818701915087601f8301126111f5578283fd5b813581811115611207576112076115a3565b604051601f8201601f19908116603f0116810190838211818310171561122f5761122f6115a3565b816040528281528a6020848701011115611247578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561127a578182fd5b611283836110f5565b915060208301358015158114611297578182fd5b809150509250929050565b600080604083850312156112b4578182fd5b6112bd836110f5565b946020939093013593505050565b6000602082840312156112dc578081fd5b8135610844816115b9565b6000602082840312156112f8578081fd5b8151610844816115b9565b600060208284031215611314578081fd5b5035919050565b600081518084526113338160208601602086016114e1565b601f01601f19169290920160200192915050565b600083516113598184602088016114e1565b83519083019061136d8183602088016114e1565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113a99083018461131b565b9695505050505050565b602081526000610844602083018461131b565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156114b1576114b1611577565b500190565b6000826114c5576114c561158d565b500490565b6000828210156114dc576114dc611577565b500390565b60005b838110156114fc5781810151838201526020016114e4565b8381111561075d5750506000910152565b600181811c9082168061152157607f821691505b6020821081141561154257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561155c5761155c611577565b5060010190565b6000826115725761157261158d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146108e357600080fdfea264697066735822122056261aff064098cf319b77787073594e4428a9f9b370ba2891d53f856f006fc164736f6c63430008040033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204407413842f9930086fc4476440c9607c966050e939c0af66fd828c33a290ea664736f6c63430008040033",
  "deployedBytecode": "0x608060405260043610620002825760003560e01c80635ab24f591162000153578063a7ae593511620000c5578063e7d41f731162000084578063e7d41f73146200089e578063e985e9c514620008d4578063effa78231462000921578063f242432a1462000946578063f4b5157b146200096b578063ffad235f146200099f57600080fd5b8063a7ae593514620007ea578063ab42da83146200080b578063b920ef71146200083d578063b92a479e1462000862578063d547741f146200087957600080fd5b80638e31ac8511620001125780638e31ac85146200072457806391d1485414620007495780639e7e65b2146200076e578063a217fddf14620007ae578063a22cb46514620007c557600080fd5b80635ab24f59146200066157806377174f85146200069c578063771a3a1d14620006b45780637c2da7aa14620006cd5780637c6926ce14620006f257600080fd5b80632bb5edec11620001f957806337eae23411620001b857806337eae234146200058057806339997a0214620005995780634560eb5514620005ca57806347c6614014620005e25780634e1273f414620006165780634f1ef286146200064a57600080fd5b80632bb5edec14620004b15780632eb2c2d614620004ec5780632f2ff15d146200051157806336568abe14620005365780633659cfe6146200055b57600080fd5b80630de705b511620002465780630de705b514620003a55780630e89341c14620003bd57806317826ac414620003f157806319be726d1462000448578063248a9ca3146200047d57600080fd5b8062fdd58e1462000287578063013cf08b14620002bf57806301ffc9a7146200032f578063045c6ce014620003655780630cd1a5b6146200038c575b600080fd5b3480156200029457600080fd5b50620002ac620002a636600462003e85565b620009c2565b6040519081526020015b60405180910390f35b348015620002cc57600080fd5b5062000309620002de36600462003f85565b600a602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b039094168452602084019290925290820152606001620002b6565b3480156200033c57600080fd5b50620003546200034e36600462003fc5565b62000a5d565b6040519015158152602001620002b6565b3480156200037257600080fd5b506200038a6200038436600462003f85565b62000abd565b005b3480156200039957600080fd5b50620002ac6101145481565b348015620003b257600080fd5b50620002ac62000e29565b348015620003ca57600080fd5b50620003e2620003dc36600462003f85565b62000eb0565b604051620002b691906200424d565b348015620003fe57600080fd5b506200042f6200041036600462003f85565b600090815261011060205260409020600201546001600160a01b031690565b6040516001600160a01b039091168152602001620002b6565b3480156200045557600080fd5b50620002ac6200046736600462003f85565b6000908152610110602052604090206001015490565b3480156200048a57600080fd5b50620002ac6200049c36600462003f85565b60009081526071602052604090206001015490565b348015620004be57600080fd5b506200042f620004d036600462003f85565b600090815261010e60205260409020546001600160a01b031690565b348015620004f957600080fd5b506200038a6200050b36600462003c01565b62000f4c565b3480156200051e57600080fd5b506200038a6200053036600462003f9e565b62000fea565b3480156200054357600080fd5b506200038a6200055536600462003f9e565b62001019565b3480156200056857600080fd5b506200038a6200057a36600462003b86565b6200109b565b3480156200058d57600080fd5b50620002ac6101155481565b348015620005a657600080fd5b50620002ac620005b836600462003b86565b60096020526000908152604090205481565b348015620005d757600080fd5b506200038a62001170565b348015620005ef57600080fd5b50620002ac6200060136600462003f85565b6000908152600a602052604090206001015490565b3480156200062357600080fd5b506200063b6200063536600462003eb3565b62001281565b604051620002b691906200420f565b6200038a6200065b36600462003d5d565b620013f0565b3480156200066e57600080fd5b506200042f6200068036600462003f85565b600090815261011060205260409020546001600160a01b031690565b348015620006a957600080fd5b50620002ac60045481565b348015620006c157600080fd5b50620002ac6101075481565b348015620006da57600080fd5b506200038a620006ec36600462004003565b620014b2565b348015620006ff57600080fd5b50620002ac6200071136600462003f85565b61010c6020526000908152604090205481565b3480156200073157600080fd5b506200038a6200074336600462003f9e565b620016e6565b3480156200075657600080fd5b50620003546200076836600462003f9e565b62001839565b3480156200077b57600080fd5b50620003546200078d36600462003e85565b61011160209081526000928352604080842090915290825290205460ff1681565b348015620007bb57600080fd5b50620002ac600081565b348015620007d257600080fd5b506200038a620007e436600462003d28565b62001864565b348015620007f757600080fd5b50610112546001600160a01b03166200042f565b3480156200081857600080fd5b50620002ac6200082a36600462003f85565b61010b6020526000908152604090205481565b3480156200084a57600080fd5b506200038a6200085c36600462003f85565b62001871565b6200038a6200087336600462003e85565b6200198e565b3480156200088657600080fd5b506200038a6200089836600462003f9e565b62001d80565b348015620008ab57600080fd5b50620002ac7f4b93cc127ac8aa5ae29c895d6f8256127b3ad24896e9757367f2697703340ef181565b348015620008e157600080fd5b5062000354620008f336600462003bc4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156200092e57600080fd5b506200038a6200094036600462003db1565b62001daa565b3480156200095357600080fd5b506200038a6200096536600462003cb9565b62001f43565b3480156200097857600080fd5b50620002ac6200098a36600462003f85565b6000908152600a602052604090206002015490565b348015620009ac57600080fd5b50610113546200042f906001600160a01b031681565b60006001600160a01b03831662000a345760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216637965db0b60e01b148062000a8f57506001600160e01b03198216636cdb3d1360e11b145b8062000aab57506001600160e01b031982166303a24d0760e21b145b8062000a57575062000a578262001fd1565b600062000acb823362002008565b9050801562000ded576000828152610109602052604081205460ff16600581111562000b0757634e487b7160e01b600052602160045260246000fd5b141562000bc657600080600062000b1e856200225d565b925092509250600062000b338484846200228a565b600081815261010b602090815260408083208a905589835261010c825280832084905533835261010f82528083208a8452909152902054909150801562000bc057604051339082156108fc029083906000818181858888f1935050505015801562000ba2573d6000803e3d6000fd5b5033600090815261010f602090815260408083208a84529091528120555b50505050505b60016000838152610109602052604090205460ff16600581111562000bfb57634e487b7160e01b600052602160045260246000fd5b141562000c5557600082815261010d602090815260408083205480845261010b9092528220549091808062000c30846200225d565b92509250925062000c4483838388620022b8565b62000c4f81620022f8565b50505050505b60026000838152610109602052604090205460ff16600581111562000c8a57634e487b7160e01b600052602160045260246000fd5b141562000cae57600082815261010a602052604090205462000cac8162002390565b505b60036000838152610109602052604090205460ff16600581111562000ce357634e487b7160e01b600052602160045260246000fd5b141562000d0757600082815261010a602052604090205462000d05816200243b565b505b60046000838152610109602052604090205460ff16600581111562000d3c57634e487b7160e01b600052602160045260246000fd5b141562000d6057600082815261010a602052604090205462000d5e816200249e565b505b60056000838152610109602052604090205460ff16600581111562000d9557634e487b7160e01b600052602160045260246000fd5b141562000db957600082815261010a602052604090205462000db781620024f7565b505b6040518281527fd24c2047577899547bacebb29e319fc7d73f6712b5adb401d45556f34bb2aa3b9060200160405180910390a15b604080518381523360208201527f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b910160405180910390a15050565b61011354604080516367a5279360e01b815290516000926001600160a01b0316916367a52793916004808301926020929190829003018186803b15801562000e7057600080fd5b505afa15801562000e85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eab91906200404a565b905090565b60606002805462000ec19062004530565b80601f016020809104026020016040519081016040528092919081815260200182805462000eef9062004530565b801562000f405780601f1062000f145761010080835404028352916020019162000f40565b820191906000526020600020905b81548152906001019060200180831162000f2257829003601f168201915b50505050509050919050565b6001600160a01b03851633148062000f6b575062000f6b8533620008f3565b62000fd45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840162000a2b565b62000fe38585858585620025a1565b5050505050565b600082815260716020526040902060010154620010088133620027ae565b6200101483836200281d565b505050565b6001600160a01b03811633146200108b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000a2b565b620010978282620028a7565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415620010e75760405162461bcd60e51b815260040162000a2b90620042aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200111b62002911565b6001600160a01b031614620011445760405162461bcd60e51b815260040162000a2b90620042f6565b6200114f816200293f565b604080516000808252602082019092526200116d918391906200294d565b50565b61011254610115546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015620011af573d6000803e3d6000fd5b50600061011581905561011354604080516331056e5760e21b815290516001600160a01b039092169163c415b95c91600480820192602092909190829003018186803b158015620011ff57600080fd5b505afa15801562001214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200123a919062003ba5565b610114546040519192506001600160a01b0383169181156108fc0291906000818181858888f1935050505015801562001277573d6000803e3d6000fd5b5050600061011455565b60608151835114620012e85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840162000a2b565b6000835167ffffffffffffffff8111156200131357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156200133d578160200160208202803683370190505b50905060005b8451811015620013e857620013a98582815181106200137257634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106200139b57634e487b7160e01b600052603260045260246000fd5b6020026020010151620009c2565b828281518110620013ca57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152620013e0816200459d565b905062001343565b509392505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156200143c5760405162461bcd60e51b815260040162000a2b90620042aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166200147062002911565b6001600160a01b031614620014995760405162461bcd60e51b815260040162000a2b90620042f6565b620014a4826200293f565b62001097828260016200294d565b6000620014bf3362002aa2565b60408051808201909152601081526f564f54494e475f434f4e53454e53555360801b6020918201528451908501209091507f90bae06ed050f61c5bcd9c1831c5f1ddf19a474d9c0f4359a5c5b110de956fa51415620015405760008181526101096020526040902080546002919060ff19166001835b021790555062001691565b60408051808201909152600b81526a564f54494e475f54494d4560a81b6020918201528351908401207fffd9d5c75037d8ede2039955964afad2be2b48f8ec892901c4de54028618f6481415620015b35760008181526101096020526040902080546003919060ff191660018362001535565b6040805180820190915260088152675441585f5241544560c01b6020918201528351908401207f0371307e20e39e9a6190879932367c0d0430f17b83cb4f5c3bf0fbd6bbe5288e1415620016235760008181526101096020526040902080546004919060ff191660018362001535565b60408051808201909152600d81526c43524541544f525f534841524560981b6020918201528351908401207f133a53f2115957806ccedd49f89e68736297e7bac83f1be18c7cded25cc8af9c14156200169157600081815261010960205260409020805460ff191660051790555b600081815261010a602052604090819020839055517fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d6517990620016d9908390339087906200441c565b60405180910390a1505050565b6000620016f43384620009c2565b905060008111620017575760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652065787460448201526532b739b4b7b760d11b606482015260840162000a2b565b600083815261010e60205260408082205490516335313c2160e11b81526001600160a01b03858116600483015290911690636a62784290602401602060405180830381600087803b158015620017ac57600080fd5b505af1158015620017c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017e791906200404a565b604080518681526001600160a01b03861660208201529081018290529091507f6af2462550ffcec7e156c83737e7c6937b7a88fba6b455739891c1b2d956dea69060600160405180910390a150505050565b60009182526071602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6200109733838362002b41565b600081815261010b60205260408120549080806200188f846200225d565b9250925092506000620018a28262002aa2565b60408051606080820183526001600160a01b03888116835260208084018981523385870181815260008981526101108552888120975188549087166001600160a01b031991821617895593516001808a01919091559151600290980180549890961697909316969096179093556101098252858120805460ff191690951790945561010d8152928490208b90558351858152928301529181018290526006918101919091526552454d4f564560d01b60808201529091507fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d651799060a00160405180910390a1505050505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b158015620019d257600080fd5b505afa158015620019e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a0d919062003ba5565b90506001600160a01b038116331462001a625760405162461bcd60e51b8152602060048201526016602482015275596f7520617265206e6f7420746865206f776e65722160501b604482015260640162000a2b565b600062001a6f3362002aa2565b604080516060810182526001600160a01b03878116825260208083018881523384860190815260008781526101108452868120955186549086166001600160a01b031991821617875592516001870155905160029095018054958516959092169490941790556101098152838320805460ff191690556101135484516367a5279360e01b81529451959650929492909116926367a527939260048083019392829003018186803b15801562001b2357600080fd5b505afa15801562001b38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b5e91906200404a565b9050801562001d265780341462001bc35760405162461bcd60e51b815260206004820152602260248201527f6d73672e76616c75652073686f756c6420657175616c206465706f7369744665604482015261652160f01b606482015260840162000a2b565b6101075434901562001c1d576000612710610107543462001be59190620044ab565b62001bf191906200448a565b905062001bff8183620044cd565b915080610115600082825462001c1691906200446f565b9091555050505b61011354604080516358710f4560e11b815290516000926001600160a01b03169163b0e21e8a916004808301926020929190829003018186803b15801562001c6457600080fd5b505afa15801562001c79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c9f91906200404a565b9050801562001cf157600061271062001cb98334620044ab565b62001cc591906200448a565b905062001cd38184620044cd565b925080610114600082825462001cea91906200446f565b9091555050505b33600090815261010f602090815260408083208784529091528120805484929062001d1e9084906200446f565b909155505050505b6040805183815233602082015260608183018190526003908201526210511160ea1b608082015290517fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d651799181900360a00190a15050505050565b60008281526071602052604090206001015462001d9e8133620027ae565b620010148383620028a7565b600c54610100900460ff1662001dc757600c5460ff161562001dcb565b303b155b62001e305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000a2b565b600c54610100900460ff1615801562001e5357600c805461ffff19166101011790555b62001e5d62002c24565b62001e6762002c6e565b62001e7460008a62002c98565b62001ea07f4b93cc127ac8aa5ae29c895d6f8256127b3ad24896e9757367f2697703340ef18b62002c98565b62001eab8b62002ca4565b62001eb6866200249e565b62001ec185620024f7565b62001ecc8a62002cb9565b62001ed7876200243b565b62001ee483838c6200228a565b5062001ef08462002390565b61011280546001600160a01b03808b166001600160a01b0319928316179092556101138054928f1692909116919091179055801562001f3557600c805461ff00191690555b505050505050505050505050565b6001600160a01b03851633148062001f62575062001f628533620008f3565b62001fc25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840162000a2b565b62000fe3858585858562002d3f565b60006001600160e01b03198216637965db0b60e01b148062000a5757506301ffc9a760e01b6001600160e01b031983161462000a57565b6000828152600a6020526040812060020154620020605760405162461bcd60e51b8152602060048201526015602482015274139bdb88195e1a5cdd195b9d081c1c9bdc1bdcd85b605a1b604482015260640162000a2b565b6001600160a01b0382166000908152600b6020908152604080832086845290915290205460ff1615620020e25760405162461bcd60e51b815260206004820152602360248201527f43616e277420766f746520666f722073616d652070726f706f73616c2074776960448201526263652160e81b606482015260840162000a2b565b6000838152600a602052604090206002015442106200213b5760405162461bcd60e51b8152602060048201526014602482015273141c9bdc1bdcd85b081a185cc8195e1c1a5c995960621b604482015260640162000a2b565b6001600160a01b038216600090815260096020526040902054620021a25760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206861766520766f74696e6720706f77657200000000604482015260640162000a2b565b6001600160a01b038216600090815260096020908152604080832054868452600a9092528220600101805491929091620021de9084906200446f565b90915550506001600160a01b0382166000908152600b602090815260408083208684529091529020805460ff19166001179055600754600454612710916200222691620044ab565b6200223291906200448a565b6000848152600a60205260409020600101541115620022545750600162000a57565b50600062000a57565b600090815261011060205260409020805460018201546002909201546001600160a01b0391821693911690565b60006200229984848462002e74565b9050620022a68262002f67565b620022b18162002ff6565b9392505050565b6001600160a01b0384166000908152610111602090815260408083208684529091529020805460ff19169055620022f28282600162003055565b50505050565b612710600460008282546200230e9190620044cd565b90915550506006546000906200232790612710620044cd565b6006546005546001600160a01b031660009081526009602052604081208054939450919262002358908490620044cd565b90915550506001600160a01b0382166000908152600960205260408120805483929062002387908490620044cd565b90915550505050565b60008111620023e25760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203e207468616e2030604482015260640162000a2b565b612710811115620024365760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203d3c203130303030604482015260640162000a2b565b600755565b60008111620024995760405162461bcd60e51b8152602060048201526024808201527f766f74696e6754696d65206d7573742062652067726561746572207468616e206044820152637a65726f60e01b606482015260840162000a2b565b600855565b6127108110620024f15760405162461bcd60e51b815260206004820152601c60248201527f74617852617465206d757374206265203c207468616e20313030303000000000604482015260640162000a2b565b61010755565b60008111620025495760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203e207468616e2030000000604482015260640162000a2b565b61271081106200259c5760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203d3c203130303030000000604482015260640162000a2b565b600655565b8151835114620026055760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840162000a2b565b6001600160a01b0384166200262e5760405162461bcd60e51b815260040162000a2b9062004342565b3360005b84518110156200273c5760008582815181106200265f57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106200268c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015620026df5760405162461bcd60e51b815260040162000a2b9062004387565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906200271e9084906200446f565b925050819055505050508062002734906200459d565b905062002632565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516200278e92919062004224565b60405180910390a4620027a6818787878787620031d8565b505050505050565b620027ba828262001839565b6200109757620027d5816001600160a01b0316601462003358565b620027e283602062003358565b604051602001620027f5929190620040eb565b60408051601f198184030181529082905262461bcd60e51b825262000a2b916004016200424d565b62002829828262001839565b620010975760008281526071602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620028633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b620028b3828262001839565b15620010975760008281526071602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6000620010978133620027ae565b60006200295962002911565b905062002966846200354e565b600083511180620029745750815b156200298857620029868484620035f5565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1662000fe357805460ff191660011781556040516001600160a01b038316602482015262002a0a90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052620035f5565b50805460ff1916815562002a1d62002911565b6001600160a01b0316826001600160a01b03161462002a975760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840162000a2b565b62000fe385620036e9565b600060016003600082825462002ab991906200446f565b925050819055506040518060600160405280836001600160a01b03168152602001600081526020016008544262002af191906200446f565b9052600380546000908152600a6020908152604091829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559201516002909201919091555492915050565b816001600160a01b0316836001600160a01b0316141562002bb75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840162000a2b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600c54610100900460ff1662002c4e5760405162461bcd60e51b815260040162000a2b90620043d1565b62002c586200372b565b62002c626200372b565b62002c6c6200372b565b565b600c54610100900460ff1662002c585760405162461bcd60e51b815260040162000a2b90620043d1565b6200109782826200281d565b805162001097906002906020840190620039ce565b6001600160a01b03811662002d1d5760405162461bcd60e51b8152602060048201526024808201527f63726561746f72416464726573732063616e27742062652061646472657373206044820152637a65726f60e01b606482015260840162000a2b565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03841662002d685760405162461bcd60e51b815260040162000a2b9062004342565b3362002d8681878762002d7b8862003755565b62000fe38862003755565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101562002dca5760405162461bcd60e51b815260040162000a2b9062004387565b6000858152602081815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929062002e099084906200446f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a462002e6b828888888888620037af565b50505050505050565b6001600160a01b03831660009081526101116020908152604080832085845290915281205460ff161562002eeb5760405162461bcd60e51b815260206004820152601960248201527f546f6b656e20616c726561647920726567697374657265642100000000000000604482015260640162000a2b565b6001600160a01b0384166000908152610111602090815260408083208684529091528120805460ff1916600190811790915561010880549192909162002f339084906200446f565b9250508190555062002f5b826101085460016040518060200160405280600081525062003886565b50610108549392505050565b6127106004600082825462002f7d91906200446f565b909155505060065460009062002f9690612710620044cd565b6006546005546001600160a01b031660009081526009602052604081208054939450919262002fc79084906200446f565b90915550506001600160a01b03821660009081526009602052604081208054839290620023879084906200446f565b6000604051620030069062003a5d565b604051809103906000f08015801562003023573d6000803e3d6000fd5b50600092835261010e602052604090922080546001600160a01b0319166001600160a01b039093169290921790915550565b6001600160a01b038316620030b95760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840162000a2b565b33620030ee81856000620030cd8762003755565b620030d88762003755565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156200316d5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840162000a2b565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15620027a65760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906200321f908990899088908890889060040162004164565b602060405180830381600087803b1580156200323a57600080fd5b505af19250505080156200326d575060408051601f3d908101601f191682019092526200326a9181019062003fe4565b60015b62003325576200327c620045e7565b806308c379a01415620032bd57506200329462004600565b80620032a15750620032bf565b8060405162461bcd60e51b815260040162000a2b91906200424d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840162000a2b565b6001600160e01b0319811663bc197c8160e01b1462002e6b5760405162461bcd60e51b815260040162000a2b9062004262565b6060600062003369836002620044ab565b620033769060026200446f565b67ffffffffffffffff8111156200339d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620033c8576020820181803683370190505b509050600360fc1b81600081518110620033f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200343057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062003456846002620044ab565b620034639060016200446f565b90505b6001811115620034fd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620034a757634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620034cc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620034f58162004516565b905062003466565b508315620022b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000a2b565b803b620035b45760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000a2b565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b620036565760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000a2b565b600080846001600160a01b031684604051620036739190620040cd565b600060405180830381855af49150503d8060008114620036b0576040519150601f19603f3d011682016040523d82523d6000602084013e620036b5565b606091505b5091509150620036e0828260405180606001604052806027815260200162005ea86027913962003990565b95945050505050565b620036f4816200354e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600c54610100900460ff1662002c6c5760405162461bcd60e51b815260040162000a2b90620043d1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106200379e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15620027a65760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190620037f69089908990889088908890600401620041c8565b602060405180830381600087803b1580156200381157600080fd5b505af192505050801562003844575060408051601f3d908101601f19168201909252620038419181019062003fe4565b60015b62003853576200327c620045e7565b6001600160e01b0319811663f23a6e6160e01b1462002e6b5760405162461bcd60e51b815260040162000a2b9062004262565b6001600160a01b038416620038e85760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840162000a2b565b33620038fc8160008762002d7b8862003755565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906200392e9084906200446f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a462000fe381600087878787620037af565b60608315620039a1575081620022b1565b825115620039b25782518084602001fd5b8160405162461bcd60e51b815260040162000a2b91906200424d565b828054620039dc9062004530565b90600052602060002090601f01602090048101928262003a00576000855562003a4b565b82601f1062003a1b57805160ff191683800117855562003a4b565b8280016001018555821562003a4b579182015b8281111562003a4b57825182559160200191906001019062003a2e565b5062003a5992915062003a6b565b5090565b6117ea80620046be83390190565b5b8082111562003a59576000815560010162003a6c565b803562003a8f8162004690565b919050565b600082601f83011262003aa5578081fd5b8135602062003ab48262004448565b60405162003ac382826200456d565b8381528281019150858301600585901b8701840188101562003ae3578586fd5b855b8581101562003b035781358452928401929084019060010162003ae5565b5090979650505050505050565b600082601f83011262003b21578081fd5b813567ffffffffffffffff81111562003b3e5762003b3e620045d1565b60405162003b57601f8301601f1916602001826200456d565b81815284602083860101111562003b6c578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121562003b98578081fd5b8135620022b18162004690565b60006020828403121562003bb7578081fd5b8151620022b18162004690565b6000806040838503121562003bd7578081fd5b823562003be48162004690565b9150602083013562003bf68162004690565b809150509250929050565b600080600080600060a0868803121562003c19578081fd5b853562003c268162004690565b9450602086013562003c388162004690565b9350604086013567ffffffffffffffff8082111562003c55578283fd5b62003c6389838a0162003a94565b9450606088013591508082111562003c79578283fd5b62003c8789838a0162003a94565b9350608088013591508082111562003c9d578283fd5b5062003cac8882890162003b10565b9150509295509295909350565b600080600080600060a0868803121562003cd1578081fd5b853562003cde8162004690565b9450602086013562003cf08162004690565b93506040860135925060608601359150608086013567ffffffffffffffff81111562003d1a578182fd5b62003cac8882890162003b10565b6000806040838503121562003d3b578182fd5b823562003d488162004690565b91506020830135801515811462003bf6578182fd5b6000806040838503121562003d70578182fd5b823562003d7d8162004690565b9150602083013567ffffffffffffffff81111562003d99578182fd5b62003da78582860162003b10565b9150509250929050565b60008060008060008060008060008060006101608c8e03121562003dd3578889fd5b8b3562003de08162004690565b9a5060208c013567ffffffffffffffff81111562003dfc57898afd5b62003e0a8e828f0162003b10565b9a505060408c013562003e1d8162004690565b985062003e2d60608d0162003a82565b975062003e3d60808d0162003a82565b965060a08c0135955060c08c0135945060e08c013593506101008c0135925062003e6b6101208d0162003a82565b91506101408c013590509295989b509295989b9093969950565b6000806040838503121562003e98578182fd5b823562003ea58162004690565b946020939093013593505050565b6000806040838503121562003ec6578182fd5b823567ffffffffffffffff8082111562003ede578384fd5b818501915085601f83011262003ef2578384fd5b8135602062003f018262004448565b60405162003f1082826200456d565b8381528281019150858301600585901b870184018b101562003f30578889fd5b8896505b8487101562003f5f57803562003f4a8162004690565b83526001969096019591830191830162003f34565b509650508601359250508082111562003f76578283fd5b5062003da78582860162003a94565b60006020828403121562003f97578081fd5b5035919050565b6000806040838503121562003fb1578182fd5b82359150602083013562003bf68162004690565b60006020828403121562003fd7578081fd5b8135620022b181620046a6565b60006020828403121562003ff6578081fd5b8151620022b181620046a6565b6000806040838503121562004016578182fd5b823567ffffffffffffffff8111156200402d578283fd5b6200403b8582860162003b10565b95602094909401359450505050565b6000602082840312156200405c578081fd5b5051919050565b6000815180845260208085019450808401835b83811015620040945781518752958201959082019060010162004076565b509495945050505050565b60008151808452620040b9816020860160208601620044e7565b601f01601f19169290920160200192915050565b60008251620040e1818460208701620044e7565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162004125816017850160208801620044e7565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162004158816028840160208801620044e7565b01602801949350505050565b6001600160a01b0386811682528516602082015260a060408201819052600090620041929083018662004063565b8281036060840152620041a6818662004063565b90508281036080840152620041bc81856200409f565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009062004204908301846200409f565b979650505050505050565b602081526000620022b1602083018462004063565b60408152600062004239604083018562004063565b8281036020840152620036e0818562004063565b602081526000620022b160208301846200409f565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8381526001600160a01b0383166020820152606060408201819052600090620036e0908301846200409f565b600067ffffffffffffffff821115620044655762004465620045d1565b5060051b60200190565b60008219821115620044855762004485620045bb565b500190565b600082620044a657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620044c857620044c8620045bb565b500290565b600082821015620044e257620044e2620045bb565b500390565b60005b8381101562004504578181015183820152602001620044ea565b83811115620022f25750506000910152565b600081620045285762004528620045bb565b506000190190565b600181811c908216806200454557607f821691505b602082108114156200456757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715620045965762004596620045d1565b6040525050565b6000600019821415620045b457620045b4620045bb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115620045fd57600481823e5160e01c5b90565b600060443d10156200460f5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156200464057505050505090565b8285019150815181811115620046595750505050505090565b843d8701016020828501011115620046745750505050505090565b62004685602082860101876200456d565b509095945050505050565b6001600160a01b03811681146200116d57600080fd5b6001600160e01b0319811681146200116d57600080fdfe60806040523480156200001157600080fd5b50604080518082018252600b81526a5265616c6d204c616e647360a81b602080830191825283518085019094526006845265524c414e445360d01b9084015281519192916200006391600091620000f2565b50805162000079906001906020840190620000f2565b50505062000096620000906200009c60201b60201c565b620000a0565b620001d5565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001009062000198565b90600052602060002090601f0160209004810192826200012457600085556200016f565b82601f106200013f57805160ff19168380011785556200016f565b828001600101855582156200016f579182015b828111156200016f57825182559160200191906001019062000152565b506200017d92915062000181565b5090565b5b808211156200017d576000815560010162000182565b600181811c90821680620001ad57607f821691505b60208210811415620001cf57634e487b7160e01b600052602260045260246000fd5b50919050565b61160580620001e56000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a22cb46511610071578063a22cb4651461021b578063b88d4fde1461022e578063c87b56dd14610241578063e985e9c514610254578063f2fde38b1461029057600080fd5b806370a08231146101e7578063715018a6146101fa5780638da5cb5b1461020257806395d89b411461021357600080fd5b806323b872dd116100de57806323b872dd1461018d57806342842e0e146101a05780636352211e146101b35780636a627842146101c657600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e3660046112cb565b6102a3565b60405190151581526020015b60405180910390f35b6101406102f5565b60405161012f91906113b3565b61016061015b366004611303565b610387565b6040516001600160a01b03909116815260200161012f565b61018b6101863660046112a2565b610421565b005b61018b61019b366004611158565b610537565b61018b6101ae366004611158565b610568565b6101606101c1366004611303565b610583565b6101d96101d436600461110c565b6105fa565b60405190815260200161012f565b6101d96101f536600461110c565b610650565b61018b6106d7565b6006546001600160a01b0316610160565b61014061070d565b61018b610229366004611268565b61071c565b61018b61023c366004611193565b61072b565b61014061024f366004611303565b610763565b610123610262366004611126565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61018b61029e36600461110c565b61084b565b60006001600160e01b031982166380ac58cd60e01b14806102d457506001600160e01b03198216635b5e139f60e01b145b806102ef57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600880546103049061150d565b80601f01602080910402602001604051908101604052809291908181526020018280546103309061150d565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061042c82610583565b9050806001600160a01b0316836001600160a01b0316141561049a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016103fc565b336001600160a01b03821614806104b657506104b68133610262565b6105285760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016103fc565b61053283836108e6565b505050565b6105413382610954565b61055d5760405162461bcd60e51b81526004016103fc9061144d565b610532838383610a4b565b6105328383836040518060200160405280600081525061072b565b6000818152600260205260408120546001600160a01b0316806102ef5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016103fc565b6006546000906001600160a01b031633146106275760405162461bcd60e51b81526004016103fc90611418565b6007805490600190600061063b838561149e565b909155506102ef90508382610beb565b919050565b60006001600160a01b0382166106bb5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016103fc565b506001600160a01b031660009081526003602052604090205490565b6006546001600160a01b031633146107015760405162461bcd60e51b81526004016103fc90611418565b61070b6000610c05565b565b6060600980546103049061150d565b610727338383610c57565b5050565b6107353383610954565b6107515760405162461bcd60e51b81526004016103fc9061144d565b61075d84848484610d26565b50505050565b6000818152600260205260409020546060906001600160a01b03166107e25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103fc565b60006107f960408051602081019091526000815290565b905060008151116108195760405180602001604052806000815250610844565b8061082384610d59565b604051602001610834929190611347565b6040516020818303038152906040525b9392505050565b6006546001600160a01b031633146108755760405162461bcd60e51b81526004016103fc90611418565b6001600160a01b0381166108da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103fc565b6108e381610c05565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061091b82610583565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166109cd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016103fc565b60006109d883610583565b9050806001600160a01b0316846001600160a01b03161480610a135750836001600160a01b0316610a0884610387565b6001600160a01b0316145b80610a4357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610a5e82610583565b6001600160a01b031614610ac65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016103fc565b6001600160a01b038216610b285760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103fc565b610b336000826108e6565b6001600160a01b0383166000908152600360205260408120805460019290610b5c9084906114ca565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b8a90849061149e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610727828260405180602001604052806000815250610e73565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610cb95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103fc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610d31848484610a4b565b610d3d84848484610ea6565b61075d5760405162461bcd60e51b81526004016103fc906113c6565b606081610d7d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610da75780610d9181611548565b9150610da09050600a836114b6565b9150610d81565b60008167ffffffffffffffff811115610dd057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610dfa576020820181803683370190505b5090505b8415610a4357610e0f6001836114ca565b9150610e1c600a86611563565b610e2790603061149e565b60f81b818381518110610e4a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610e6c600a866114b6565b9450610dfe565b610e7d8383610fb3565b610e8a6000848484610ea6565b6105325760405162461bcd60e51b81526004016103fc906113c6565b60006001600160a01b0384163b15610fa857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610eea903390899088908890600401611376565b602060405180830381600087803b158015610f0457600080fd5b505af1925050508015610f34575060408051601f3d908101601f19168201909252610f31918101906112e7565b60015b610f8e573d808015610f62576040519150601f19603f3d011682016040523d82523d6000602084013e610f67565b606091505b508051610f865760405162461bcd60e51b81526004016103fc906113c6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a43565b506001949350505050565b6001600160a01b0382166110095760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103fc565b6000818152600260205260409020546001600160a01b03161561106e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103fc565b6001600160a01b038216600090815260036020526040812080546001929061109790849061149e565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b038116811461064b57600080fd5b60006020828403121561111d578081fd5b610844826110f5565b60008060408385031215611138578081fd5b611141836110f5565b915061114f602084016110f5565b90509250929050565b60008060006060848603121561116c578081fd5b611175846110f5565b9250611183602085016110f5565b9150604084013590509250925092565b600080600080608085870312156111a8578081fd5b6111b1856110f5565b93506111bf602086016110f5565b925060408501359150606085013567ffffffffffffffff808211156111e2578283fd5b818701915087601f8301126111f5578283fd5b813581811115611207576112076115a3565b604051601f8201601f19908116603f0116810190838211818310171561122f5761122f6115a3565b816040528281528a6020848701011115611247578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561127a578182fd5b611283836110f5565b915060208301358015158114611297578182fd5b809150509250929050565b600080604083850312156112b4578182fd5b6112bd836110f5565b946020939093013593505050565b6000602082840312156112dc578081fd5b8135610844816115b9565b6000602082840312156112f8578081fd5b8151610844816115b9565b600060208284031215611314578081fd5b5035919050565b600081518084526113338160208601602086016114e1565b601f01601f19169290920160200192915050565b600083516113598184602088016114e1565b83519083019061136d8183602088016114e1565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906113a99083018461131b565b9695505050505050565b602081526000610844602083018461131b565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156114b1576114b1611577565b500190565b6000826114c5576114c561158d565b500490565b6000828210156114dc576114dc611577565b500390565b60005b838110156114fc5781810151838201526020016114e4565b8381111561075d5750506000910152565b600181811c9082168061152157607f821691505b6020821081141561154257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561155c5761155c611577565b5060010190565b6000826115725761157261158d565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146108e357600080fdfea264697066735822122056261aff064098cf319b77787073594e4428a9f9b370ba2891d53f856f006fc164736f6c63430008040033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204407413842f9930086fc4476440c9607c966050e939c0af66fd828c33a290ea664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addExtension(address,uint256)": {
        "params": {
          "nftToAttachAddress": "address of the NFT to attach",
          "nftToAttachId": "ID of the NFT to attach"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_extensionRealmLands": {
        "details": "extension ID => realmLands address"
      },
      "_proposalToExtension": {
        "details": "remove extension proposal ID => extension ID"
      },
      "_proposalTypes": {
        "details": "proposal id => proposal type"
      },
      "_setProposalValues": {
        "details": "set values proposal id => value"
      },
      "extensionToAddProposal": {
        "details": "extension ID => add proposal ID"
      },
      "proposalToExtension": {
        "details": "add proposal ID => extension ID"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addExtension(address,uint256)": {
        "notice": "Submit proposal to add an extension"
      },
      "removeExtension(uint256)": {
        "notice": "Submit proposal to remove an extension"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2715,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2721,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2723,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7104,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_votingProposalCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7106,
        "contract": "contracts/Realm.sol:Realm",
        "label": "votingPower",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7108,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_creatorAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7110,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_creatorShare",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7112,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_votingConsensus",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7114,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_votingTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7118,
        "contract": "contracts/Realm.sol:Realm",
        "label": "votingPowerByAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7130,
        "contract": "contracts/Realm.sol:Realm",
        "label": "proposals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Proposal)7125_storage)"
      },
      {
        "astId": 7136,
        "contract": "contracts/Realm.sol:Realm",
        "label": "hasVotedForProposal",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 950,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_initialized",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 953,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_initializing",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1718,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2027,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "63",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_roles",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "114",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 932,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "163",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1127,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5792,
        "contract": "contracts/Realm.sol:Realm",
        "label": "taxRate",
        "offset": 0,
        "slot": "263",
        "type": "t_uint256"
      },
      {
        "astId": 5794,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_tokenId",
        "offset": 0,
        "slot": "264",
        "type": "t_uint256"
      },
      {
        "astId": 5800,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_proposalTypes",
        "offset": 0,
        "slot": "265",
        "type": "t_mapping(t_uint256,t_enum(ProposalTypes)5764)"
      },
      {
        "astId": 5805,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_setProposalValues",
        "offset": 0,
        "slot": "266",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5810,
        "contract": "contracts/Realm.sol:Realm",
        "label": "extensionToAddProposal",
        "offset": 0,
        "slot": "267",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5815,
        "contract": "contracts/Realm.sol:Realm",
        "label": "proposalToExtension",
        "offset": 0,
        "slot": "268",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5820,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_proposalToExtension",
        "offset": 0,
        "slot": "269",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5825,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_extensionRealmLands",
        "offset": 0,
        "slot": "270",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5831,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_deposits",
        "offset": 0,
        "slot": "271",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5836,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_proposals",
        "offset": 0,
        "slot": "272",
        "type": "t_mapping(t_uint256,t_struct(ProposalData)7100_storage)"
      },
      {
        "astId": 5842,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_registeredTokens",
        "offset": 0,
        "slot": "273",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5844,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_distributionManager",
        "offset": 0,
        "slot": "274",
        "type": "t_address"
      },
      {
        "astId": 5846,
        "contract": "contracts/Realm.sol:Realm",
        "label": "protocolParameters",
        "offset": 0,
        "slot": "275",
        "type": "t_address"
      },
      {
        "astId": 5848,
        "contract": "contracts/Realm.sol:Realm",
        "label": "accruedProtocolFees",
        "offset": 0,
        "slot": "276",
        "type": "t_uint256"
      },
      {
        "astId": 5850,
        "contract": "contracts/Realm.sol:Realm",
        "label": "accruedTaxes",
        "offset": 0,
        "slot": "277",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ProposalTypes)5764": {
        "encoding": "inplace",
        "label": "enum Realm.ProposalTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(ProposalTypes)5764)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Realm.ProposalTypes)",
        "numberOfBytes": "32",
        "value": "t_enum(ProposalTypes)5764"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)7125_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)7125_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalData)7100_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProposalData)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalData)7100_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)7125_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 7120,
            "contract": "contracts/Realm.sol:Realm",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7122,
            "contract": "contracts/Realm.sol:Realm",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7124,
            "contract": "contracts/Realm.sol:Realm",
            "label": "votingEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProposalData)7100_storage": {
        "encoding": "inplace",
        "label": "struct ProposalData",
        "members": [
          {
            "astId": 7095,
            "contract": "contracts/Realm.sol:Realm",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7097,
            "contract": "contracts/Realm.sol:Realm",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7099,
            "contract": "contracts/Realm.sol:Realm",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/Realm.sol:Realm",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/Realm.sol:Realm",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}