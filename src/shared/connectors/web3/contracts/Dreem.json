{
  "address": "0x39fe2303309E3B4810F6a7Cd9C8AD187c0b1A4ca",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUnthrottled",
          "type": "bool"
        }
      ],
      "name": "MarkedUnthrottled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "MarkedWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTransferAmount",
          "type": "uint256"
        }
      ],
      "name": "MaxTransferAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "RestrictionActiveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradingTime",
          "type": "uint256"
        }
      ],
      "name": "TradingTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initAntibot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isUnthrottled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMaxTransferAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setRestrictionActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setTradingStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_unthrottled",
          "type": "bool"
        }
      ],
      "name": "unthrottleAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "whitelistAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe543a0c3bff39a2bdb3a34aed2e8f87fcf266a2819d86999207a55f27c084ce7",
  "receipt": {
    "to": null,
    "from": "0x3b97a646Aa4F134305B15e2B77fec22E721c2e15",
    "contractAddress": "0x39fe2303309E3B4810F6a7Cd9C8AD187c0b1A4ca",
    "transactionIndex": 1,
    "gasUsed": "3582277",
    "logsBloom": "0x
    "blockHash": "0xed53bd09513d5ce4ea98c6e4c378632a0abde6ab52f501a70719e35b9636cede",
    "transactionHash": "0xe543a0c3bff39a2bdb3a34aed2e8f87fcf266a2819d86999207a55f27c084ce7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22945334,
        "transactionHash": "0xe543a0c3bff39a2bdb3a34aed2e8f87fcf266a2819d86999207a55f27c084ce7",
        "address": "0x39fe2303309E3B4810F6a7Cd9C8AD187c0b1A4ca",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003b97a646aa4f134305b15e2b77fec22e721c2e15"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xed53bd09513d5ce4ea98c6e4c378632a0abde6ab52f501a70719e35b9636cede"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 22945334,
        "transactionHash": "0xe543a0c3bff39a2bdb3a34aed2e8f87fcf266a2819d86999207a55f27c084ce7",
        "address": "0x39fe2303309E3B4810F6a7Cd9C8AD187c0b1A4ca",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000003b97a646aa4f134305b15e2b77fec22e721c2e15",
          "0x0000000000000000000000005b539e5c04ff6a0dea289697435a9729dd9d34f0"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xed53bd09513d5ce4ea98c6e4c378632a0abde6ab52f501a70719e35b9636cede"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 22945334,
        "transactionHash": "0xe543a0c3bff39a2bdb3a34aed2e8f87fcf266a2819d86999207a55f27c084ce7",
        "address": "0x39fe2303309E3B4810F6a7Cd9C8AD187c0b1A4ca",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b539e5c04ff6a0dea289697435a9729dd9d34f0"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 4,
        "blockHash": "0xed53bd09513d5ce4ea98c6e4c378632a0abde6ab52f501a70719e35b9636cede"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 22945334,
        "transactionHash": "0xe543a0c3bff39a2bdb3a34aed2e8f87fcf266a2819d86999207a55f27c084ce7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003b97a646aa4f134305b15e2b77fec22e721c2e15",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000013e2b8c7a9936f50000000000000000000000000000000000000000000000000701aa614846cce00000000000000000000000000000000000000000000002bbf27b17a1a6e9b94000000000000000000000000000000000000000000000000005c37ed4cdad95eb0000000000000000000000000000000000000000000002bbf3b9432e2182f035",
        "logIndex": 5,
        "blockHash": "0xed53bd09513d5ce4ea98c6e4c378632a0abde6ab52f501a70719e35b9636cede"
      }
    ],
    "blockNumber": 22945334,
    "cumulativeGasUsed": "3634410",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5b539e5C04ff6A0DeA289697435A9729dD9D34f0"
  ],
  "solcInputHash": "432c00a2f667450c3013fbd8940e20b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUnthrottled\",\"type\":\"bool\"}],\"name\":\"MarkedUnthrottled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"MarkedWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTransferAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTransferAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"RestrictionActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingTime\",\"type\":\"uint256\"}],\"name\":\"TradingTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUnthrottled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setRestrictionActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTradingStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_unthrottled\",\"type\":\"bool\"}],\"name\":\"unthrottleAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"transferOwnership(address,bool,bool)\":{\"details\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.      Can only be invoked by the current `owner`.\",\"params\":{\"_direct\":\"True if `_newOwner` should be set immediately. False if `_newOwner` needs to use `claimOwnership`.\",\"_newOwner\":\"Address of the new owner.\",\"_renounce\":\"Allows the `_newOwner` to be `address(0)` if `_direct` and `_renounce` is True. Has no effect otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dreem.sol\":\"Dreem\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Dreem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { EIP712 } from \\\"./external/openzeppelin/draft-EIP712.sol\\\";\\nimport { ECDSA } from \\\"./external/openzeppelin/ECDSA.sol\\\";\\n\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { Ownable } from \\\"./helpers/Ownable.sol\\\";\\nimport { TransactionThrottler } from \\\"./helpers/TransactionThrottler.sol\\\";\\nimport { Constants } from \\\"./libraries/Constants.sol\\\";\\n\\ncontract Dreem is IERC20, EIP712, Ownable, TransactionThrottler {\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public override nonces;\\n\\n    constructor(address _admin) EIP712(Constants.getName(), \\\"1\\\") {\\n        _setOwner(_admin);\\n        _mint(_admin, 100_000_000 * 10**18);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return Constants.getName();\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return Constants.getSymbol();\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return Constants.getDecimals();\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function _mint(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function burn(uint256 amount) external override returns (bool) {\\n        _burn(msg.sender, amount);\\n        return true;\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external override returns (bool) {\\n        uint256 currentAllowance = _allowances[account][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, msg.sender, currentAllowance - amount);\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function _burn(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address spender) external view override returns (uint256) {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        if (currentAllowance < type(uint256).max) {\\n            // DEXes can use max allowance\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n        _transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private transactionThrottler(sender, recipient, amount) {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount is 0\\\");\\n        require(_balances[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[_owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function permit(\\n        address _owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        // Revert faster here then later on signature (gas saving for user)\\n        require(_owner != address(0), \\\"ERC20Permit: Permit from zero address\\\");\\n        require(spender != address(0), \\\"ERC20Permit: Permit to zero address\\\");\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, _owner, spender, value, nonces[_owner]++, deadline));\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == _owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(_owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x5d04edad80e1d659191df267a2e226d1f5bb9e20bf3577f4dca616aa16de0df0\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x70d66ef35b1cf31e415cb9a38a532f637c78590f6ff700b49cb58af5d1256920\",\"license\":\"MIT\"},\"contracts/external/openzeppelin/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x9ae727b7a1148ff3d58aa26dbe1d0341f8fa16a47065b12f608640728031c555\",\"license\":\"MIT\"},\"contracts/helpers/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ncontract OwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract Ownable is OwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev `owner` defaults to msg.sender on construction.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n     *      Can only be invoked by the current `owner`.\\n     * @param _newOwner Address of the new owner.\\n     * @param _direct True if `_newOwner` should be set immediately. False if `_newOwner` needs to use `claimOwnership`.\\n     * @param _renounce Allows the `_newOwner` to be `address(0)` if `_direct` and `_renounce` is True. Has no effect otherwise\\n     */\\n    function transferOwnership(\\n        address _newOwner,\\n        bool _direct,\\n        bool _renounce\\n    ) external onlyOwner {\\n        if (_direct) {\\n            require(_newOwner != address(0) || _renounce, \\\"zero address\\\");\\n\\n            emit OwnershipTransferred(owner, _newOwner);\\n            owner = _newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            pendingOwner = _newOwner;\\n        }\\n    }\\n\\n    /**\\n     * @dev Needs to be called by `pendingOwner` to claim ownership.\\n     */\\n    function claimOwnership() external {\\n        address _pendingOwner = pendingOwner;\\n        require(msg.sender == _pendingOwner, \\\"caller != pending owner\\\");\\n\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _setOwner(address newOwner) internal {\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6395086069bcfdfd1435275945434b07c34be93045f6862449d0b3df5ec550f4\",\"license\":\"MIT\"},\"contracts/helpers/TransactionThrottler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\ncontract TransactionThrottler is Ownable {\\n\\n    bool private _tradingStartSet;\\n    bool private _initialized;\\n    bool private _restrictionActive;\\n    uint256 private _tradingStart;\\n    uint256 private _maxTransferAmount;\\n    uint256 private constant _delayBetweenTx = 30;\\n    mapping(address => bool) private _isWhitelisted;\\n    mapping(address => bool) private _isUnthrottled;\\n    mapping(address => uint256) private _previousTx;\\n\\n    event TradingTimeChanged(uint256 tradingTime);\\n    event RestrictionActiveChanged(bool active);\\n    event MaxTransferAmountChanged(uint256 maxTransferAmount);\\n    event MarkedWhitelisted(address indexed account, bool isWhitelisted);\\n    event MarkedUnthrottled(address indexed account, bool isUnthrottled);\\n\\n    function initAntibot() external onlyOwner() {\\n        require(!_initialized, \\\"Protection: Already initialized\\\");\\n        _initialized = true;\\n        _isUnthrottled[owner] = true;\\n        _tradingStart = 1639958400;\\n        _maxTransferAmount = 50_000 * 10**18;\\n        _restrictionActive = true;\\n\\n        emit MarkedUnthrottled(owner, true);\\n        emit TradingTimeChanged(_tradingStart);\\n        emit MaxTransferAmountChanged(_maxTransferAmount);\\n        emit RestrictionActiveChanged(_restrictionActive);\\n    }\\n\\n\\n    function setTradingStart(uint256 _time) external onlyOwner() {\\n        require(_tradingStart > block.timestamp, \\\"Protection: To late\\\");\\n        _tradingStart = _time;\\n        emit TradingTimeChanged(_tradingStart);\\n    }\\n\\n    function setMaxTransferAmount(uint256 _amount) external onlyOwner() {\\n        _maxTransferAmount = _amount;\\n        emit MaxTransferAmountChanged(_maxTransferAmount);\\n    }\\n\\n    function setRestrictionActive(bool _active) external onlyOwner() {\\n        _restrictionActive = _active;\\n        emit RestrictionActiveChanged(_restrictionActive);\\n    }\\n\\n    function unthrottleAccount(address _account, bool _unthrottled) external onlyOwner() {\\n        require(_account != address(0), \\\"Zero address\\\");\\n        _isUnthrottled[_account] = _unthrottled;\\n        emit MarkedUnthrottled(_account, _unthrottled);\\n    }\\n\\n    function isUnthrottled(address account) external view returns (bool) {\\n        return _isUnthrottled[account];\\n    }\\n\\n    function whitelistAccount(address _account, bool _whitelisted) external onlyOwner() {\\n        require(_account != address(0), \\\"Zero address\\\");\\n        _isWhitelisted[_account] = _whitelisted;\\n        emit MarkedWhitelisted(_account, _whitelisted);\\n    }\\n\\n    function isWhitelisted(address account) external view returns (bool) {\\n        return _isWhitelisted[account];\\n    }\\n\\n    modifier transactionThrottler(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        if (_restrictionActive && !_isUnthrottled[recipient] && !_isUnthrottled[sender]) {\\n            require(_tradingStart != 0 && block.timestamp >= _tradingStart, \\\"Protection: Transfers disabled\\\");\\n\\n            if (block.timestamp <= _tradingStart + 3600 && _maxTransferAmount > 0) {\\n                require(amount <= _maxTransferAmount, \\\"Protection: Limit exceeded\\\");\\n            }\\n\\n            if (!_isWhitelisted[recipient]) {\\n                require(_previousTx[recipient] + _delayBetweenTx <= block.timestamp, \\\"Protection: 30 sec/tx allowed\\\");\\n                _previousTx[recipient] = block.timestamp;\\n            }\\n\\n            if (!_isWhitelisted[sender]) {\\n                require(_previousTx[sender] + _delayBetweenTx <= block.timestamp, \\\"Protection: 30 sec/tx allowed\\\");\\n                _previousTx[sender] = block.timestamp;\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe729c2a8e1fdd40b8e87ef3a9f078cb79d2afdf4d7193795abcae09ae9802472\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function burn(uint256 amount) external returns (bool);\\n\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\n\\n    // EIP 2612\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa9ebf8d356c29bca56e1659756428ab836b542d66137642e677cc471e961bef4\",\"license\":\"MIT\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nlibrary Constants {\\n    string private constant _name = \\\"Dreem\\\";\\n    string private constant _symbol = \\\"TEST\\\";\\n    uint8 private constant _decimals = 18;\\n\\n    function getName() internal pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function getSymbol() internal pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function getDecimals() internal pure returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xc26408e88a8b331bd6c8a916d3f5f3b07e10d364423ce04b5364b8548c1ab1f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620044f8380380620044f883398181016040528101906200003891906200043f565b6200004d6200014660201b62001b461760201c565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260c081815250508160e081815250504660a08181525050620000eb8184846200018360201b60201c565b6080818152505080610100818152505050505050506200011133620001bf60201b60201c565b6200012281620001bf60201b60201c565b6200013f816a52b7d2dcc80cd2e40000006200028360201b60201c565b5062000641565b60606040518060400160405280600581526020017f447265656d000000000000000000000000000000000000000000000000000000815250905090565b60008383834630604051602001620001a0959493929190620004b8565b6040516020818303038152906040528051906020012090509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620002f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002ed9062000576565b60405180910390fd5b80600760008282546200030a9190620005c7565b9250508190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620003629190620005c7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620003c9919062000624565b60405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040782620003da565b9050919050565b6200041981620003fa565b81146200042557600080fd5b50565b60008151905062000439816200040e565b92915050565b600060208284031215620004585762000457620003d5565b5b6000620004688482850162000428565b91505092915050565b6000819050919050565b620004868162000471565b82525050565b6000819050919050565b620004a1816200048c565b82525050565b620004b281620003fa565b82525050565b600060a082019050620004cf60008301886200047b565b620004de60208301876200047b565b620004ed60408301866200047b565b620004fc606083018562000496565b6200050b6080830184620004a7565b9695505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200055e601f8362000515565b91506200056b8262000526565b602082019050919050565b6000602082019050818103600083015262000591816200054f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620005d4826200048c565b9150620005e1836200048c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000619576200061862000598565b5b828201905092915050565b60006020820190506200063b600083018462000496565b92915050565b60805160a05160c05160e05161010051613e726200068660003960006124390152600061247b0152600061245a015260006123e60152600061240e0152613e726000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a082311161010457806399c8df18116100a2578063db69467511610071578063db69467514610554578063dc4aa0591461055e578063dd62ed3e1461058e578063e30c3978146105be576101cf565b806399c8df18146104bc578063a457c2d7146104d8578063a9059cbb14610508578063d505accf14610538576101cf565b80637ecebe00116100de5780637ecebe00146104345780638bf55409146104645780638da5cb5b1461048057806395d89b411461049e576101cf565b806370a08231146103b85780637419683c146103e857806379cc679014610404576101cf565b8063313ce567116101715780633af32abf1161014b5780633af32abf1461033257806342966c68146103625780634af640d1146103925780634e71e0c8146103ae576101cf565b8063313ce567146102c65780633644e515146102e45780633950935114610302576101cf565b80630c8d9d7b116101ad5780630c8d9d7b1461023e57806318160ddd1461025a57806323b872dd1461027857806330adf81f146102a8576101cf565b806306fdde03146101d4578063078dfbe7146101f2578063095ea7b31461020e575b600080fd5b6101dc6105dc565b6040516101e99190612957565b60405180910390f35b61020c60048036038101906102079190612a14565b6105eb565b005b61022860048036038101906102239190612a9d565b61083f565b6040516102359190612aec565b60405180910390f35b61025860048036038101906102539190612b07565b610856565b005b6102626109fd565b60405161026f9190612b56565b60405180910390f35b610292600480360381019061028d9190612b71565b610a07565b60405161029f9190612aec565b60405180910390f35b6102b0610b22565b6040516102bd9190612bdd565b60405180910390f35b6102ce610b49565b6040516102db9190612c14565b60405180910390f35b6102ec610b58565b6040516102f99190612bdd565b60405180910390f35b61031c60048036038101906103179190612a9d565b610b67565b6040516103299190612aec565b60405180910390f35b61034c60048036038101906103479190612c2f565b610c05565b6040516103599190612aec565b60405180910390f35b61037c60048036038101906103779190612c5c565b610c5b565b6040516103899190612aec565b60405180910390f35b6103ac60048036038101906103a79190612c89565b610c70565b005b6103b6610d61565b005b6103d260048036038101906103cd9190612c2f565b610ef5565b6040516103df9190612b56565b60405180910390f35b61040260048036038101906103fd9190612c5c565b610f3e565b005b61041e60048036038101906104199190612a9d565b611053565b60405161042b9190612aec565b60405180910390f35b61044e60048036038101906104499190612c2f565b611143565b60405161045b9190612b56565b60405180910390f35b61047e60048036038101906104799190612c5c565b61115b565b005b61048861122c565b6040516104959190612cc5565b60405180910390f35b6104a6611250565b6040516104b39190612957565b60405180910390f35b6104d660048036038101906104d19190612b07565b61125f565b005b6104f260048036038101906104ed9190612a9d565b611406565b6040516104ff9190612aec565b60405180910390f35b610522600480360381019061051d9190612a9d565b6114ec565b60405161052f9190612aec565b60405180910390f35b610552600480360381019061054d9190612d38565b611503565b005b61055c611773565b005b61057860048036038101906105739190612c2f565b611a43565b6040516105859190612aec565b60405180910390f35b6105a860048036038101906105a39190612dda565b611a99565b6040516105b59190612b56565b60405180910390f35b6105c6611b20565b6040516105d39190612cc5565b60405180910390f35b60606105e6611b46565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090612e66565b60405180910390fd5b81156107f857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806106b85750805b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90612ed2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061083a565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b600061084c338484611b83565b6001905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db90612e66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90612f3e565b60405180910390fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f032b60b621d5620ebed4224d2af054acf250833415d69a1a90b9c0de47c951f1826040516109f19190612aec565b60405180910390a25050565b6000600754905090565b600080600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390612fd0565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610b0b57610b0a85338584610b05919061301f565b611b83565b5b610b16858585611d4e565b60019150509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b6000610b536123d9565b905090565b6000610b626123e2565b905090565b6000610bfb338484600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf69190613053565b611b83565b6001905092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610c6733836124a5565b60019050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590612e66565b60405180910390fd5b80600160166101000a81548160ff0219169083151502179055507ff19da345eb86d7718a0c6e1d1e68d0c70e9fb40e7f54bfaaa1110c5dd5942eaa600160169054906101000a900460ff16604051610d569190612aec565b60405180910390a150565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded906130f5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc390612e66565b60405180910390fd5b4260025411611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790613161565b60405180910390fd5b806002819055507feb0dd367985442b0f5a817b2cee27fa94416adda70f365044808a6552418fec66002546040516110489190612b56565b60405180910390a150565b600080600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110f906131f3565b60405180910390fd5b61112e84338584611129919061301f565b611b83565b61113884846124a5565b600191505092915050565b600a6020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e090612e66565b60405180910390fd5b806003819055507ff81e49436a9468d4e5a18ec3a66d9a51fd5eb03de3ddddd43bd85f6ae1b072b36003546040516112219190612b56565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061125a61266f565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e490612e66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561135d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135490612f3e565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc1f37bd5d85be2239236c010011c8837e596c2c28d94d45893872fb5064e75ce826040516113fa9190612aec565b60405180910390a25050565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c290613285565b60405180910390fd5b6114e1338585846114dc919061301f565b611b83565b600191505092915050565b60006114f9338484611d4e565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a90613317565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156115e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115da906133a9565b60405180910390fd5b83421115611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90613415565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061169f90613435565b91905055896040516020016116b99695949392919061347e565b60405160208183030381529060405280519060200120905060006116dc826126ac565b905060006116ec828787876126c6565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461175c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117539061352b565b60405180910390fd5b6117678a8a8a611b83565b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f890612e66565b60405180910390fd5b600160159054906101000a900460ff1615611851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184890613597565b60405180910390fd5b60018060156101000a81548160ff0219169083151502179055506001600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506361bfc780600281905550690a968163f0a57b40000060038190555060018060166101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f032b60b621d5620ebed4224d2af054acf250833415d69a1a90b9c0de47c951f160016040516119819190612aec565b60405180910390a27feb0dd367985442b0f5a817b2cee27fa94416adda70f365044808a6552418fec66002546040516119ba9190612b56565b60405180910390a17ff81e49436a9468d4e5a18ec3a66d9a51fd5eb03de3ddddd43bd85f6ae1b072b36003546040516119f39190612b56565b60405180910390a17ff19da345eb86d7718a0c6e1d1e68d0c70e9fb40e7f54bfaaa1110c5dd5942eaa600160169054906101000a900460ff16604051611a399190612aec565b60405180910390a1565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040518060400160405280600581526020017f447265656d000000000000000000000000000000000000000000000000000000815250905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea90613629565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a906136bb565b60405180910390fd5b80600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611d419190612b56565b60405180910390a3505050565b828282600160169054906101000a900460ff168015611db75750600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611e0d5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561211b57600060025414158015611e2757506002544210155b611e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5d90613727565b60405180910390fd5b610e10600254611e769190613053565b4211158015611e8757506000600354115b15611ed257600354811115611ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec890613793565b60405180910390fd5b5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ff65742601e600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f709190613053565b1115611fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa8906137ff565b60405180910390fd5b42600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661211a5742601e600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120949190613053565b11156120d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cc906137ff565b60405180910390fd5b42600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561218b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218290613891565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156121fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f290613923565b60405180910390fd5b6000841161223e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122359061398f565b60405180910390fd5b83600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156122c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b790613a21565b60405180910390fd5b83600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461230f919061301f565b9250508190555083600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123659190613053565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516123c99190612b56565b60405180910390a3505050505050565b60006012905090565b60007f0000000000000000000000000000000000000000000000000000000000000000461415612434577f000000000000000000000000000000000000000000000000000000000000000090506124a2565b61249f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612851565b90505b90565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250c90613ab3565b60405180910390fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561259c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259390613b45565b60405180910390fd5b81816125a8919061301f565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008282546125fd919061301f565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516126629190612b56565b60405180910390a3505050565b60606040518060400160405280600481526020017f5445535400000000000000000000000000000000000000000000000000000000815250905090565b60006126bf6126b96123e2565b8361288b565b9050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c111561272e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272590613bd7565b60405180910390fd5b601b8460ff1614806127435750601c8460ff16145b612782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277990613c69565b60405180910390fd5b6000600186868686604051600081526020016040526040516127a79493929190613c89565b6020604051602081039080840390855afa1580156127c9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283c90613d1a565b60405180910390fd5b80915050949350505050565b6000838383463060405160200161286c959493929190613d3a565b6040516020818303038152906040528051906020012090509392505050565b600082826040516020016128a0929190613e05565b60405160208183030381529060405280519060200120905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128f85780820151818401526020810190506128dd565b83811115612907576000848401525b50505050565b6000601f19601f8301169050919050565b6000612929826128be565b61293381856128c9565b93506129438185602086016128da565b61294c8161290d565b840191505092915050565b60006020820190508181036000830152612971818461291e565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129a98261297e565b9050919050565b6129b98161299e565b81146129c457600080fd5b50565b6000813590506129d6816129b0565b92915050565b60008115159050919050565b6129f1816129dc565b81146129fc57600080fd5b50565b600081359050612a0e816129e8565b92915050565b600080600060608486031215612a2d57612a2c612979565b5b6000612a3b868287016129c7565b9350506020612a4c868287016129ff565b9250506040612a5d868287016129ff565b9150509250925092565b6000819050919050565b612a7a81612a67565b8114612a8557600080fd5b50565b600081359050612a9781612a71565b92915050565b60008060408385031215612ab457612ab3612979565b5b6000612ac2858286016129c7565b9250506020612ad385828601612a88565b9150509250929050565b612ae6816129dc565b82525050565b6000602082019050612b016000830184612add565b92915050565b60008060408385031215612b1e57612b1d612979565b5b6000612b2c858286016129c7565b9250506020612b3d858286016129ff565b9150509250929050565b612b5081612a67565b82525050565b6000602082019050612b6b6000830184612b47565b92915050565b600080600060608486031215612b8a57612b89612979565b5b6000612b98868287016129c7565b9350506020612ba9868287016129c7565b9250506040612bba86828701612a88565b9150509250925092565b6000819050919050565b612bd781612bc4565b82525050565b6000602082019050612bf26000830184612bce565b92915050565b600060ff82169050919050565b612c0e81612bf8565b82525050565b6000602082019050612c296000830184612c05565b92915050565b600060208284031215612c4557612c44612979565b5b6000612c53848285016129c7565b91505092915050565b600060208284031215612c7257612c71612979565b5b6000612c8084828501612a88565b91505092915050565b600060208284031215612c9f57612c9e612979565b5b6000612cad848285016129ff565b91505092915050565b612cbf8161299e565b82525050565b6000602082019050612cda6000830184612cb6565b92915050565b612ce981612bf8565b8114612cf457600080fd5b50565b600081359050612d0681612ce0565b92915050565b612d1581612bc4565b8114612d2057600080fd5b50565b600081359050612d3281612d0c565b92915050565b600080600080600080600060e0888a031215612d5757612d56612979565b5b6000612d658a828b016129c7565b9750506020612d768a828b016129c7565b9650506040612d878a828b01612a88565b9550506060612d988a828b01612a88565b9450506080612da98a828b01612cf7565b93505060a0612dba8a828b01612d23565b92505060c0612dcb8a828b01612d23565b91505092959891949750929550565b60008060408385031215612df157612df0612979565b5b6000612dff858286016129c7565b9250506020612e10858286016129c7565b9150509250929050565b7f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b6000612e506017836128c9565b9150612e5b82612e1a565b602082019050919050565b60006020820190508181036000830152612e7f81612e43565b9050919050565b7f7a65726f20616464726573730000000000000000000000000000000000000000600082015250565b6000612ebc600c836128c9565b9150612ec782612e86565b602082019050919050565b60006020820190508181036000830152612eeb81612eaf565b9050919050565b7f5a65726f20616464726573730000000000000000000000000000000000000000600082015250565b6000612f28600c836128c9565b9150612f3382612ef2565b602082019050919050565b60006020820190508181036000830152612f5781612f1b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000612fba6028836128c9565b9150612fc582612f5e565b604082019050919050565b60006020820190508181036000830152612fe981612fad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061302a82612a67565b915061303583612a67565b92508282101561304857613047612ff0565b5b828203905092915050565b600061305e82612a67565b915061306983612a67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561309e5761309d612ff0565b5b828201905092915050565b7f63616c6c657220213d2070656e64696e67206f776e6572000000000000000000600082015250565b60006130df6017836128c9565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f50726f74656374696f6e3a20546f206c61746500000000000000000000000000600082015250565b600061314b6013836128c9565b915061315682613115565b602082019050919050565b6000602082019050818103600083015261317a8161313e565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006131dd6024836128c9565b91506131e882613181565b604082019050919050565b6000602082019050818103600083015261320c816131d0565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061326f6025836128c9565b915061327a82613213565b604082019050919050565b6000602082019050818103600083015261329e81613262565b9050919050565b7f45524332305065726d69743a205065726d69742066726f6d207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006133016025836128c9565b915061330c826132a5565b604082019050919050565b60006020820190508181036000830152613330816132f4565b9050919050565b7f45524332305065726d69743a205065726d697420746f207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006133936023836128c9565b915061339e82613337565b604082019050919050565b600060208201905081810360008301526133c281613386565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006133ff601d836128c9565b915061340a826133c9565b602082019050919050565b6000602082019050818103600083015261342e816133f2565b9050919050565b600061344082612a67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561347357613472612ff0565b5b600182019050919050565b600060c0820190506134936000830189612bce565b6134a06020830188612cb6565b6134ad6040830187612cb6565b6134ba6060830186612b47565b6134c76080830185612b47565b6134d460a0830184612b47565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000613515601e836128c9565b9150613520826134df565b602082019050919050565b6000602082019050818103600083015261354481613508565b9050919050565b7f50726f74656374696f6e3a20416c726561647920696e697469616c697a656400600082015250565b6000613581601f836128c9565b915061358c8261354b565b602082019050919050565b600060208201905081810360008301526135b081613574565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006136136024836128c9565b915061361e826135b7565b604082019050919050565b6000602082019050818103600083015261364281613606565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006136a56022836128c9565b91506136b082613649565b604082019050919050565b600060208201905081810360008301526136d481613698565b9050919050565b7f50726f74656374696f6e3a205472616e73666572732064697361626c65640000600082015250565b6000613711601e836128c9565b915061371c826136db565b602082019050919050565b6000602082019050818103600083015261374081613704565b9050919050565b7f50726f74656374696f6e3a204c696d6974206578636565646564000000000000600082015250565b600061377d601a836128c9565b915061378882613747565b602082019050919050565b600060208201905081810360008301526137ac81613770565b9050919050565b7f50726f74656374696f6e3a203330207365632f747820616c6c6f776564000000600082015250565b60006137e9601d836128c9565b91506137f4826137b3565b602082019050919050565b60006020820190508181036000830152613818816137dc565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061387b6025836128c9565b91506138868261381f565b604082019050919050565b600060208201905081810360008301526138aa8161386e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061390d6023836128c9565b9150613918826138b1565b604082019050919050565b6000602082019050818103600083015261393c81613900565b9050919050565b7f5472616e7366657220616d6f756e742069732030000000000000000000000000600082015250565b60006139796014836128c9565b915061398482613943565b602082019050919050565b600060208201905081810360008301526139a88161396c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613a0b6026836128c9565b9150613a16826139af565b604082019050919050565b60006020820190508181036000830152613a3a816139fe565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a9d6021836128c9565b9150613aa882613a41565b604082019050919050565b60006020820190508181036000830152613acc81613a90565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b2f6022836128c9565b9150613b3a82613ad3565b604082019050919050565b60006020820190508181036000830152613b5e81613b22565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613bc16022836128c9565b9150613bcc82613b65565b604082019050919050565b60006020820190508181036000830152613bf081613bb4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c536022836128c9565b9150613c5e82613bf7565b604082019050919050565b60006020820190508181036000830152613c8281613c46565b9050919050565b6000608082019050613c9e6000830187612bce565b613cab6020830186612c05565b613cb86040830185612bce565b613cc56060830184612bce565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613d046018836128c9565b9150613d0f82613cce565b602082019050919050565b60006020820190508181036000830152613d3381613cf7565b9050919050565b600060a082019050613d4f6000830188612bce565b613d5c6020830187612bce565b613d696040830186612bce565b613d766060830185612b47565b613d836080830184612cb6565b9695505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000613dce600283613d8d565b9150613dd982613d98565b600282019050919050565b6000819050919050565b613dff613dfa82612bc4565b613de4565b82525050565b6000613e1082613dc1565b9150613e1c8285613dee565b602082019150613e2c8284613dee565b602082019150819050939250505056fea26469706673582212207aadf46b7ba531a0899f3b7173c6da3beec98782a18d2575202f24d8d33d86c164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a082311161010457806399c8df18116100a2578063db69467511610071578063db69467514610554578063dc4aa0591461055e578063dd62ed3e1461058e578063e30c3978146105be576101cf565b806399c8df18146104bc578063a457c2d7146104d8578063a9059cbb14610508578063d505accf14610538576101cf565b80637ecebe00116100de5780637ecebe00146104345780638bf55409146104645780638da5cb5b1461048057806395d89b411461049e576101cf565b806370a08231146103b85780637419683c146103e857806379cc679014610404576101cf565b8063313ce567116101715780633af32abf1161014b5780633af32abf1461033257806342966c68146103625780634af640d1146103925780634e71e0c8146103ae576101cf565b8063313ce567146102c65780633644e515146102e45780633950935114610302576101cf565b80630c8d9d7b116101ad5780630c8d9d7b1461023e57806318160ddd1461025a57806323b872dd1461027857806330adf81f146102a8576101cf565b806306fdde03146101d4578063078dfbe7146101f2578063095ea7b31461020e575b600080fd5b6101dc6105dc565b6040516101e99190612957565b60405180910390f35b61020c60048036038101906102079190612a14565b6105eb565b005b61022860048036038101906102239190612a9d565b61083f565b6040516102359190612aec565b60405180910390f35b61025860048036038101906102539190612b07565b610856565b005b6102626109fd565b60405161026f9190612b56565b60405180910390f35b610292600480360381019061028d9190612b71565b610a07565b60405161029f9190612aec565b60405180910390f35b6102b0610b22565b6040516102bd9190612bdd565b60405180910390f35b6102ce610b49565b6040516102db9190612c14565b60405180910390f35b6102ec610b58565b6040516102f99190612bdd565b60405180910390f35b61031c60048036038101906103179190612a9d565b610b67565b6040516103299190612aec565b60405180910390f35b61034c60048036038101906103479190612c2f565b610c05565b6040516103599190612aec565b60405180910390f35b61037c60048036038101906103779190612c5c565b610c5b565b6040516103899190612aec565b60405180910390f35b6103ac60048036038101906103a79190612c89565b610c70565b005b6103b6610d61565b005b6103d260048036038101906103cd9190612c2f565b610ef5565b6040516103df9190612b56565b60405180910390f35b61040260048036038101906103fd9190612c5c565b610f3e565b005b61041e60048036038101906104199190612a9d565b611053565b60405161042b9190612aec565b60405180910390f35b61044e60048036038101906104499190612c2f565b611143565b60405161045b9190612b56565b60405180910390f35b61047e60048036038101906104799190612c5c565b61115b565b005b61048861122c565b6040516104959190612cc5565b60405180910390f35b6104a6611250565b6040516104b39190612957565b60405180910390f35b6104d660048036038101906104d19190612b07565b61125f565b005b6104f260048036038101906104ed9190612a9d565b611406565b6040516104ff9190612aec565b60405180910390f35b610522600480360381019061051d9190612a9d565b6114ec565b60405161052f9190612aec565b60405180910390f35b610552600480360381019061054d9190612d38565b611503565b005b61055c611773565b005b61057860048036038101906105739190612c2f565b611a43565b6040516105859190612aec565b60405180910390f35b6105a860048036038101906105a39190612dda565b611a99565b6040516105b59190612b56565b60405180910390f35b6105c6611b20565b6040516105d39190612cc5565b60405180910390f35b60606105e6611b46565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090612e66565b60405180910390fd5b81156107f857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806106b85750805b6106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90612ed2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061083a565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b600061084c338484611b83565b6001905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db90612e66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90612f3e565b60405180910390fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f032b60b621d5620ebed4224d2af054acf250833415d69a1a90b9c0de47c951f1826040516109f19190612aec565b60405180910390a25050565b6000600754905090565b600080600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610acc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac390612fd0565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610b0b57610b0a85338584610b05919061301f565b611b83565b5b610b16858585611d4e565b60019150509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b6000610b536123d9565b905090565b6000610b626123e2565b905090565b6000610bfb338484600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bf69190613053565b611b83565b6001905092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610c6733836124a5565b60019050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590612e66565b60405180910390fd5b80600160166101000a81548160ff0219169083151502179055507ff19da345eb86d7718a0c6e1d1e68d0c70e9fb40e7f54bfaaa1110c5dd5942eaa600160169054906101000a900460ff16604051610d569190612aec565b60405180910390a150565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded906130f5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc390612e66565b60405180910390fd5b4260025411611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790613161565b60405180910390fd5b806002819055507feb0dd367985442b0f5a817b2cee27fa94416adda70f365044808a6552418fec66002546040516110489190612b56565b60405180910390a150565b600080600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611118576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110f906131f3565b60405180910390fd5b61112e84338584611129919061301f565b611b83565b61113884846124a5565b600191505092915050565b600a6020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e090612e66565b60405180910390fd5b806003819055507ff81e49436a9468d4e5a18ec3a66d9a51fd5eb03de3ddddd43bd85f6ae1b072b36003546040516112219190612b56565b60405180910390a150565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061125a61266f565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e490612e66565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561135d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135490612f3e565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc1f37bd5d85be2239236c010011c8837e596c2c28d94d45893872fb5064e75ce826040516113fa9190612aec565b60405180910390a25050565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c290613285565b60405180910390fd5b6114e1338585846114dc919061301f565b611b83565b600191505092915050565b60006114f9338484611d4e565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156a90613317565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156115e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115da906133a9565b60405180910390fd5b83421115611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90613415565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600a60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061169f90613435565b91905055896040516020016116b99695949392919061347e565b60405160208183030381529060405280519060200120905060006116dc826126ac565b905060006116ec828787876126c6565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461175c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117539061352b565b60405180910390fd5b6117678a8a8a611b83565b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f890612e66565b60405180910390fd5b600160159054906101000a900460ff1615611851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184890613597565b60405180910390fd5b60018060156101000a81548160ff0219169083151502179055506001600560008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506361bfc780600281905550690a968163f0a57b40000060038190555060018060166101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f032b60b621d5620ebed4224d2af054acf250833415d69a1a90b9c0de47c951f160016040516119819190612aec565b60405180910390a27feb0dd367985442b0f5a817b2cee27fa94416adda70f365044808a6552418fec66002546040516119ba9190612b56565b60405180910390a17ff81e49436a9468d4e5a18ec3a66d9a51fd5eb03de3ddddd43bd85f6ae1b072b36003546040516119f39190612b56565b60405180910390a17ff19da345eb86d7718a0c6e1d1e68d0c70e9fb40e7f54bfaaa1110c5dd5942eaa600160169054906101000a900460ff16604051611a399190612aec565b60405180910390a1565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040518060400160405280600581526020017f447265656d000000000000000000000000000000000000000000000000000000815250905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea90613629565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a906136bb565b60405180910390fd5b80600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611d419190612b56565b60405180910390a3505050565b828282600160169054906101000a900460ff168015611db75750600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611e0d5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561211b57600060025414158015611e2757506002544210155b611e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5d90613727565b60405180910390fd5b610e10600254611e769190613053565b4211158015611e8757506000600354115b15611ed257600354811115611ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec890613793565b60405180910390fd5b5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ff65742601e600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f709190613053565b1115611fb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa8906137ff565b60405180910390fd5b42600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661211a5742601e600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120949190613053565b11156120d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cc906137ff565b60405180910390fd5b42600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141561218b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218290613891565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156121fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f290613923565b60405180910390fd5b6000841161223e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122359061398f565b60405180910390fd5b83600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156122c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b790613a21565b60405180910390fd5b83600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461230f919061301f565b9250508190555083600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123659190613053565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516123c99190612b56565b60405180910390a3505050505050565b60006012905090565b60007f0000000000000000000000000000000000000000000000000000000000000000461415612434577f000000000000000000000000000000000000000000000000000000000000000090506124a2565b61249f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612851565b90505b90565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250c90613ab3565b60405180910390fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561259c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259390613b45565b60405180910390fd5b81816125a8919061301f565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600760008282546125fd919061301f565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516126629190612b56565b60405180910390a3505050565b60606040518060400160405280600481526020017f5445535400000000000000000000000000000000000000000000000000000000815250905090565b60006126bf6126b96123e2565b8361288b565b9050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c111561272e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272590613bd7565b60405180910390fd5b601b8460ff1614806127435750601c8460ff16145b612782576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277990613c69565b60405180910390fd5b6000600186868686604051600081526020016040526040516127a79493929190613c89565b6020604051602081039080840390855afa1580156127c9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283c90613d1a565b60405180910390fd5b80915050949350505050565b6000838383463060405160200161286c959493929190613d3a565b6040516020818303038152906040528051906020012090509392505050565b600082826040516020016128a0929190613e05565b60405160208183030381529060405280519060200120905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128f85780820151818401526020810190506128dd565b83811115612907576000848401525b50505050565b6000601f19601f8301169050919050565b6000612929826128be565b61293381856128c9565b93506129438185602086016128da565b61294c8161290d565b840191505092915050565b60006020820190508181036000830152612971818461291e565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129a98261297e565b9050919050565b6129b98161299e565b81146129c457600080fd5b50565b6000813590506129d6816129b0565b92915050565b60008115159050919050565b6129f1816129dc565b81146129fc57600080fd5b50565b600081359050612a0e816129e8565b92915050565b600080600060608486031215612a2d57612a2c612979565b5b6000612a3b868287016129c7565b9350506020612a4c868287016129ff565b9250506040612a5d868287016129ff565b9150509250925092565b6000819050919050565b612a7a81612a67565b8114612a8557600080fd5b50565b600081359050612a9781612a71565b92915050565b60008060408385031215612ab457612ab3612979565b5b6000612ac2858286016129c7565b9250506020612ad385828601612a88565b9150509250929050565b612ae6816129dc565b82525050565b6000602082019050612b016000830184612add565b92915050565b60008060408385031215612b1e57612b1d612979565b5b6000612b2c858286016129c7565b9250506020612b3d858286016129ff565b9150509250929050565b612b5081612a67565b82525050565b6000602082019050612b6b6000830184612b47565b92915050565b600080600060608486031215612b8a57612b89612979565b5b6000612b98868287016129c7565b9350506020612ba9868287016129c7565b9250506040612bba86828701612a88565b9150509250925092565b6000819050919050565b612bd781612bc4565b82525050565b6000602082019050612bf26000830184612bce565b92915050565b600060ff82169050919050565b612c0e81612bf8565b82525050565b6000602082019050612c296000830184612c05565b92915050565b600060208284031215612c4557612c44612979565b5b6000612c53848285016129c7565b91505092915050565b600060208284031215612c7257612c71612979565b5b6000612c8084828501612a88565b91505092915050565b600060208284031215612c9f57612c9e612979565b5b6000612cad848285016129ff565b91505092915050565b612cbf8161299e565b82525050565b6000602082019050612cda6000830184612cb6565b92915050565b612ce981612bf8565b8114612cf457600080fd5b50565b600081359050612d0681612ce0565b92915050565b612d1581612bc4565b8114612d2057600080fd5b50565b600081359050612d3281612d0c565b92915050565b600080600080600080600060e0888a031215612d5757612d56612979565b5b6000612d658a828b016129c7565b9750506020612d768a828b016129c7565b9650506040612d878a828b01612a88565b9550506060612d988a828b01612a88565b9450506080612da98a828b01612cf7565b93505060a0612dba8a828b01612d23565b92505060c0612dcb8a828b01612d23565b91505092959891949750929550565b60008060408385031215612df157612df0612979565b5b6000612dff858286016129c7565b9250506020612e10858286016129c7565b9150509250929050565b7f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b6000612e506017836128c9565b9150612e5b82612e1a565b602082019050919050565b60006020820190508181036000830152612e7f81612e43565b9050919050565b7f7a65726f20616464726573730000000000000000000000000000000000000000600082015250565b6000612ebc600c836128c9565b9150612ec782612e86565b602082019050919050565b60006020820190508181036000830152612eeb81612eaf565b9050919050565b7f5a65726f20616464726573730000000000000000000000000000000000000000600082015250565b6000612f28600c836128c9565b9150612f3382612ef2565b602082019050919050565b60006020820190508181036000830152612f5781612f1b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000612fba6028836128c9565b9150612fc582612f5e565b604082019050919050565b60006020820190508181036000830152612fe981612fad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061302a82612a67565b915061303583612a67565b92508282101561304857613047612ff0565b5b828203905092915050565b600061305e82612a67565b915061306983612a67565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561309e5761309d612ff0565b5b828201905092915050565b7f63616c6c657220213d2070656e64696e67206f776e6572000000000000000000600082015250565b60006130df6017836128c9565b91506130ea826130a9565b602082019050919050565b6000602082019050818103600083015261310e816130d2565b9050919050565b7f50726f74656374696f6e3a20546f206c61746500000000000000000000000000600082015250565b600061314b6013836128c9565b915061315682613115565b602082019050919050565b6000602082019050818103600083015261317a8161313e565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006131dd6024836128c9565b91506131e882613181565b604082019050919050565b6000602082019050818103600083015261320c816131d0565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061326f6025836128c9565b915061327a82613213565b604082019050919050565b6000602082019050818103600083015261329e81613262565b9050919050565b7f45524332305065726d69743a205065726d69742066726f6d207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006133016025836128c9565b915061330c826132a5565b604082019050919050565b60006020820190508181036000830152613330816132f4565b9050919050565b7f45524332305065726d69743a205065726d697420746f207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006133936023836128c9565b915061339e82613337565b604082019050919050565b600060208201905081810360008301526133c281613386565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006133ff601d836128c9565b915061340a826133c9565b602082019050919050565b6000602082019050818103600083015261342e816133f2565b9050919050565b600061344082612a67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561347357613472612ff0565b5b600182019050919050565b600060c0820190506134936000830189612bce565b6134a06020830188612cb6565b6134ad6040830187612cb6565b6134ba6060830186612b47565b6134c76080830185612b47565b6134d460a0830184612b47565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000613515601e836128c9565b9150613520826134df565b602082019050919050565b6000602082019050818103600083015261354481613508565b9050919050565b7f50726f74656374696f6e3a20416c726561647920696e697469616c697a656400600082015250565b6000613581601f836128c9565b915061358c8261354b565b602082019050919050565b600060208201905081810360008301526135b081613574565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006136136024836128c9565b915061361e826135b7565b604082019050919050565b6000602082019050818103600083015261364281613606565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006136a56022836128c9565b91506136b082613649565b604082019050919050565b600060208201905081810360008301526136d481613698565b9050919050565b7f50726f74656374696f6e3a205472616e73666572732064697361626c65640000600082015250565b6000613711601e836128c9565b915061371c826136db565b602082019050919050565b6000602082019050818103600083015261374081613704565b9050919050565b7f50726f74656374696f6e3a204c696d6974206578636565646564000000000000600082015250565b600061377d601a836128c9565b915061378882613747565b602082019050919050565b600060208201905081810360008301526137ac81613770565b9050919050565b7f50726f74656374696f6e3a203330207365632f747820616c6c6f776564000000600082015250565b60006137e9601d836128c9565b91506137f4826137b3565b602082019050919050565b60006020820190508181036000830152613818816137dc565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061387b6025836128c9565b91506138868261381f565b604082019050919050565b600060208201905081810360008301526138aa8161386e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061390d6023836128c9565b9150613918826138b1565b604082019050919050565b6000602082019050818103600083015261393c81613900565b9050919050565b7f5472616e7366657220616d6f756e742069732030000000000000000000000000600082015250565b60006139796014836128c9565b915061398482613943565b602082019050919050565b600060208201905081810360008301526139a88161396c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613a0b6026836128c9565b9150613a16826139af565b604082019050919050565b60006020820190508181036000830152613a3a816139fe565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a9d6021836128c9565b9150613aa882613a41565b604082019050919050565b60006020820190508181036000830152613acc81613a90565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b2f6022836128c9565b9150613b3a82613ad3565b604082019050919050565b60006020820190508181036000830152613b5e81613b22565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613bc16022836128c9565b9150613bcc82613b65565b604082019050919050565b60006020820190508181036000830152613bf081613bb4565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613c536022836128c9565b9150613c5e82613bf7565b604082019050919050565b60006020820190508181036000830152613c8281613c46565b9050919050565b6000608082019050613c9e6000830187612bce565b613cab6020830186612c05565b613cb86040830185612bce565b613cc56060830184612bce565b95945050505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000613d046018836128c9565b9150613d0f82613cce565b602082019050919050565b60006020820190508181036000830152613d3381613cf7565b9050919050565b600060a082019050613d4f6000830188612bce565b613d5c6020830187612bce565b613d696040830186612bce565b613d766060830185612b47565b613d836080830184612cb6565b9695505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000613dce600283613d8d565b9150613dd982613d98565b600282019050919050565b6000819050919050565b613dff613dfa82612bc4565b613de4565b82525050565b6000613e1082613dc1565b9150613e1c8285613dee565b602082019150613e2c8284613dee565b602082019150819050939250505056fea26469706673582212207aadf46b7ba531a0899f3b7173c6da3beec98782a18d2575202f24d8d33d86c164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "transferOwnership(address,bool,bool)": {
        "details": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.      Can only be invoked by the current `owner`.",
        "params": {
          "_direct": "True if `_newOwner` should be set immediately. False if `_newOwner` needs to use `claimOwnership`.",
          "_newOwner": "Address of the new owner.",
          "_renounce": "Allows the `_newOwner` to be `address(0)` if `_direct` and `_renounce` is True. Has no effect otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 946,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 948,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1090,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_tradingStartSet",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1092,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_initialized",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1094,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_restrictionActive",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1096,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_tradingStart",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1098,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_maxTransferAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1105,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_isWhitelisted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1109,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_isUnthrottled",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1113,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_previousTx",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 27,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_balances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "_allowances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 41,
        "contract": "contracts/Dreem.sol:Dreem",
        "label": "nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}