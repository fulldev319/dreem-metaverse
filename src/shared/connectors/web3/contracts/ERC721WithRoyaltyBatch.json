{
  "address": "0xA0a13806C1A7af2e6188d15aC43F081a7D46A0B0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endingId",
          "type": "uint256"
        }
      ],
      "name": "BatchMinting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "RoyaltyNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRoyalty",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyaltiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenRoyaltyByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IERC721WithRoyalty.TokenRoyaltyConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalURIEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        }
      ],
      "name": "mintBatchFromId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity_",
          "type": "string"
        }
      ],
      "name": "mintBatchWithRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity_",
          "type": "string"
        }
      ],
      "name": "mintMasterBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity_",
          "type": "string"
        }
      ],
      "name": "mintWithRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "proofOfAuthenticity",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IERC721WithRoyalty.TokenRoyalty",
          "name": "royalty",
          "type": "tuple"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "internalURI_",
          "type": "string"
        }
      ],
      "name": "setInternalURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintQty_",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintQty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IERC721WithRoyalty.TokenRoyaltyConfig[]",
          "name": "royaltyConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setTokenRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebab438570b21ca3910fa9e6203b1f7592fe4486ab86861d9df3d5b43a674d6b",
  "receipt": {
    "to": null,
    "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "contractAddress": "0xA0a13806C1A7af2e6188d15aC43F081a7D46A0B0",
    "transactionIndex": 21,
    "gasUsed": "2753940",
    "logsBloom": "0x0000000000000000000000000100000000000000000000000080000000000000000000000000000000000000000000000010800000000000000000000000000000000000000000000000a000000000800001000000000000000100000000004000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000100000000000000000000000100040000020000000000000000000000000000000000000000000000000000400000000100000",
    "blockHash": "0xb20e800dc76751d54d6d3ae540ba214d84c48a2b6f3f446b6e03adbf4c8f9729",
    "transactionHash": "0xebab438570b21ca3910fa9e6203b1f7592fe4486ab86861d9df3d5b43a674d6b",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 24359670,
        "transactionHash": "0xebab438570b21ca3910fa9e6203b1f7592fe4486ab86861d9df3d5b43a674d6b",
        "address": "0xA0a13806C1A7af2e6188d15aC43F081a7D46A0B0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b"
        ],
        "data": "0x",
        "logIndex": 72,
        "blockHash": "0xb20e800dc76751d54d6d3ae540ba214d84c48a2b6f3f446b6e03adbf4c8f9729"
      },
      {
        "transactionIndex": 21,
        "blockNumber": 24359670,
        "transactionHash": "0xebab438570b21ca3910fa9e6203b1f7592fe4486ab86861d9df3d5b43a674d6b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001391633be92b980000000000000000000000000000000000000000000000000a6539bc6410d32b0000000000000000000000000000000000000000000005b9541233923a1c7f390000000000000000000000000000000000000000000000000a51a8592827a7930000000000000000000000000000000000000000000005b95425c4f57605aad1",
        "logIndex": 73,
        "blockHash": "0xb20e800dc76751d54d6d3ae540ba214d84c48a2b6f3f446b6e03adbf4c8f9729"
      }
    ],
    "blockNumber": 24359670,
    "cumulativeGasUsed": "6003015",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "test",
    "test"
  ],
  "solcInputHash": "29031765c5bfbd700d4af95e1f24bfda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingId\",\"type\":\"uint256\"}],\"name\":\"BatchMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"RoyaltyNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyaltiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC721WithRoyalty.TokenRoyaltyConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalURIEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"name\":\"mintBatchFromId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity_\",\"type\":\"string\"}],\"name\":\"mintBatchWithRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity_\",\"type\":\"string\"}],\"name\":\"mintMasterBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity_\",\"type\":\"string\"}],\"name\":\"mintWithRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"proofOfAuthenticity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC721WithRoyalty.TokenRoyalty\",\"name\":\"royalty\",\"type\":\"tuple\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"internalURI_\",\"type\":\"string\"}],\"name\":\"setInternalURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintQty_\",\"type\":\"uint256\"}],\"name\":\"setMaxMintQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct IERC721WithRoyalty.TokenRoyaltyConfig[]\",\"name\":\"royaltyConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getTokenRoyaltiesCount()\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\"},\"getTokenRoyaltyByIndex(uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IEIP2981RoyaltyOverride-royaltyInfo}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setDefaultRoyalty((address,uint16))\":{\"details\":\"Set a default royalty configuration.  Will be used if no token specific configuration is set\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_batchData\":{\"details\":\"batch ID => batch data\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721WithRoyalty.sol\":\"ERC721WithRoyalty\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x40cc76b7f62d20c90b3a18479ad0b1d20de7b2cc665cb3d7585362403651e62a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ERC721WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./ERC721WithRoyaltyCore.sol\\\";\\r\\n\\r\\ncontract ERC721WithRoyalty is ERC721WithRoyaltyCore, ERC721, Ownable {\\r\\n    mapping(uint256 => string) private tokenToUri;\\r\\n\\r\\n    uint256 public counter;\\r\\n    mapping(uint256 => string) private _proofOfAuthenticity;\\r\\n\\r\\n    event RoyaltyNFT(\\r\\n        uint256 initialId,\\r\\n        uint256 amount,\\r\\n        address owner,\\r\\n        string uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps\\r\\n    );\\r\\n\\r\\n    event BatchMinting(\\r\\n        bytes32 batchId,\\r\\n        uint256 startingId,\\r\\n        uint256 endingId\\r\\n    );\\r\\n\\r\\n    bool public internalURIEnabled;\\r\\n\\r\\n    string private _internalURI;\\r\\n\\r\\n    uint256 _maxMintQty;\\r\\n\\r\\n    /// @dev batch ID => batch data\\r\\n    mapping(bytes32 => BatchData) _batchData;\\r\\n\\r\\n    struct BatchData {\\r\\n        address to;\\r\\n        uint256 remainingQtyToMint;\\r\\n        string uri;\\r\\n        address royaltyAddress;\\r\\n        uint16 bps;\\r\\n        string proofOfAuthenticity;\\r\\n    }\\r\\n\\r\\n    function setInternalURI(string calldata internalURI_) public onlyOwner {\\r\\n        _internalURI = internalURI_;\\r\\n    }\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        ERC721(name, symbol)\\r\\n    {}\\r\\n\\r\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setTokenRoyalties(royaltyConfigs);\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(royalty);\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) public view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function mint(address to, string calldata uri) public {\\r\\n        counter = counter + 1;\\r\\n        _mint(to, counter, uri);\\r\\n    }\\r\\n\\r\\n    function proofOfAuthenticity(uint256 id) public view returns (string memory) {\\r\\n        return _proofOfAuthenticity[id];\\r\\n    }\\r\\n\\r\\n    function mintBatchWithRoyalty(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) public onlyOwner {\\r\\n\\r\\n        uint256 initialId = counter + 1;\\r\\n\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            _mintWithRoyalty(\\r\\n                to,\\r\\n                uri,\\r\\n                royaltyAddress,\\r\\n                bps,\\r\\n                proofOfAuthenticity_\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RoyaltyNFT(initialId, amount, to, uri, royaltyAddress, bps);\\r\\n    }\\r\\n\\r\\n    function mintMasterBatch(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) public onlyOwner returns (bytes32 batchId) {\\r\\n\\r\\n        uint256 initialId = counter + 1;\\r\\n\\r\\n        batchId = keccak256(abi.encode(address(this), initialId));\\r\\n\\r\\n        uint256 qtyToMint;\\r\\n\\r\\n        if (quantity < _maxMintQty) {\\r\\n            qtyToMint = quantity;\\r\\n        } else {\\r\\n            qtyToMint = _maxMintQty;\\r\\n            quantity -= _maxMintQty;\\r\\n            _batchData[batchId] = BatchData(\\r\\n                to,\\r\\n                quantity,\\r\\n                uri,\\r\\n                royaltyAddress,\\r\\n                bps,\\r\\n                proofOfAuthenticity_\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _mintBatchWithRoyalty(\\r\\n            batchId,\\r\\n            initialId, \\r\\n            to, \\r\\n            qtyToMint, \\r\\n            uri, \\r\\n            royaltyAddress, \\r\\n            bps, \\r\\n            proofOfAuthenticity_\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function mintBatchFromId(bytes32 batchId) public onlyOwner {\\r\\n\\r\\n        address to = _batchData[batchId].to;\\r\\n        uint256 remainingQtyToMint = _batchData[batchId].remainingQtyToMint;\\r\\n        string memory uri = _batchData[batchId].uri;\\r\\n        address royaltyAddress = _batchData[batchId].royaltyAddress;\\r\\n        uint16 bps = _batchData[batchId].bps;\\r\\n        string memory proofOfAuthenticity_ = _batchData[batchId].proofOfAuthenticity;\\r\\n\\r\\n        require(remainingQtyToMint > 0, \\\"Invalid batchId or already minted all tokens\\\");\\r\\n\\r\\n        uint256 initialId = counter + 1;\\r\\n        uint256 qtyToMint;\\r\\n\\r\\n        if (remainingQtyToMint < _maxMintQty) {\\r\\n            qtyToMint = remainingQtyToMint;\\r\\n        } else {\\r\\n            qtyToMint = _maxMintQty;\\r\\n            remainingQtyToMint -= _maxMintQty;\\r\\n            _batchData[batchId].remainingQtyToMint = remainingQtyToMint;\\r\\n        }\\r\\n\\r\\n        _mintBatchWithRoyalty(\\r\\n            batchId, \\r\\n            initialId, \\r\\n            to, \\r\\n            qtyToMint,\\r\\n            uri,\\r\\n            royaltyAddress,\\r\\n            bps,\\r\\n            proofOfAuthenticity_\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function _mintBatchWithRoyalty(\\r\\n        bytes32 batchId,\\r\\n        uint256 initialId,\\r\\n        address to,\\r\\n        uint256 qtyToMint,\\r\\n        string memory uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string memory proofOfAuthenticity_\\r\\n    ) internal {\\r\\n        for (uint256 i = 0; i < qtyToMint; i++) {\\r\\n            _mintWithRoyalty(\\r\\n                to,\\r\\n                uri,\\r\\n                royaltyAddress,\\r\\n                bps,\\r\\n                proofOfAuthenticity_\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RoyaltyNFT(initialId, qtyToMint, to, uri, royaltyAddress, bps);\\r\\n        emit BatchMinting(batchId, initialId, initialId+qtyToMint);\\r\\n    }\\r\\n\\r\\n    function mintWithRoyalty(\\r\\n        address to,\\r\\n        string memory uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string memory proofOfAuthenticity_\\r\\n    ) public onlyOwner {\\r\\n\\r\\n        uint256 tokenId = counter + 1;\\r\\n\\r\\n        _mintWithRoyalty(\\r\\n            to,\\r\\n            uri,\\r\\n            royaltyAddress,\\r\\n            bps,\\r\\n            proofOfAuthenticity_\\r\\n        );\\r\\n\\r\\n        emit RoyaltyNFT(tokenId, 1, to, uri, royaltyAddress, bps);\\r\\n    }\\r\\n\\r\\n    function _mintWithRoyalty(\\r\\n        address to,\\r\\n        string memory uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string memory proofOfAuthenticity_\\r\\n    ) internal {\\r\\n        counter = counter + 1;\\r\\n        _mint(to, counter, uri);\\r\\n\\r\\n        TokenRoyaltyConfig[] memory config = new TokenRoyaltyConfig[](1);\\r\\n        config[0] = TokenRoyaltyConfig(counter, royaltyAddress, bps);\\r\\n        _setTokenRoyalties(config);\\r\\n\\r\\n        _proofOfAuthenticity[counter] = proofOfAuthenticity_;\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, string memory uri) public onlyOwner {\\r\\n        counter = counter + 1;\\r\\n        _safeMint(to, counter, uri);\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        string memory uri,\\r\\n        bytes memory _data\\r\\n    ) public onlyOwner {\\r\\n        counter = counter + 1;\\r\\n        _safeMint(to, counter, uri, _data);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (internalURIEnabled) {\\r\\n            return _internalURI;\\r\\n        } else {\\r\\n            return tokenToUri[tokenId];\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC721WithRoyaltyCore)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string memory uri\\r\\n    ) private {\\r\\n        super._mint(to, tokenId);\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string memory uri // bytes memory _data\\r\\n    ) private {\\r\\n        super._safeMint(to, tokenId);\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string memory uri,\\r\\n        bytes memory _data\\r\\n    ) private {\\r\\n        super._safeMint(to, tokenId, _data);\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n    \\r\\n    function setMaxMintQty(uint256 maxMintQty_) public onlyOwner {\\r\\n        _maxMintQty = maxMintQty_;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xc8cf75f845296e284ac1530d55906bfd19f28c4808fd5d0bf0116bc02899b128\",\"license\":\"MIT\"},\"contracts/ERC721WithRoyaltyCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./IERC721WithRoyalty.sol\\\";\\r\\n\\r\\nabstract contract ERC721WithRoyaltyCore is\\r\\n    IERC2981,\\r\\n    IERC721WithRoyalty,\\r\\n    ERC165\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    TokenRoyalty public defaultRoyalty;\\r\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\r\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC2981).interfaceId ||\\r\\n            interfaceId == type(IERC721WithRoyalty).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets token royalties. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs)\\r\\n        internal\\r\\n    {\\r\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\r\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\r\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\r\\n            if (royaltyConfig.recipient == address(0)) {\\r\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\r\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\r\\n            } else {\\r\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltySet(\\r\\n                    royaltyConfig.tokenId,\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets default royalty. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\r\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\r\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\r\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\r\\n     */\\r\\n    function getTokenRoyaltiesCount() external view override returns (uint256) {\\r\\n        return _tokensWithRoyalties.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\r\\n     */\\r\\n    function getTokenRoyaltyByIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (TokenRoyaltyConfig memory)\\r\\n    {\\r\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\r\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\r\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\r\\n     */\\r\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address, uint256)\\r\\n    {\\r\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\r\\n            return (\\r\\n                _tokenRoyalties[tokenId].recipient,\\r\\n                (value * _tokenRoyalties[tokenId].bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\r\\n            return (\\r\\n                defaultRoyalty.recipient,\\r\\n                (value * defaultRoyalty.bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        return (address(0), 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ca4a8430889a2f97147cfe4a05d252ca9af88cfce578b28c7c6cc0e3414afc4\",\"license\":\"MIT\"},\"contracts/IERC721WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721WithRoyalty is IERC165 {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties)\\n        external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index)\\n        external\\n        view\\n        returns (TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n}\\n\",\"keccak256\":\"0xa30fe7ca74d0737509d4d682c87ee569332fdb101fd8fa3d4b75c1235e841ff5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200325d3803806200325d833981016040819052620000349162000237565b8151829082906200004d906004906020850190620000de565b50805162000063906005906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f1565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec906200029e565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b600082601f83011262000195578081fd5b81516001600160401b0380821115620001b257620001b2620002db565b604051601f8301601f19908116603f01168101908282118183101715620001dd57620001dd620002db565b81604052838152602092508683858801011115620001f9578485fd5b8491505b838210156200021c5785820183015181830184015290820190620001fd565b838211156200022d57848385830101525b9695505050505050565b600080604083850312156200024a578182fd5b82516001600160401b038082111562000261578384fd5b6200026f8683870162000184565b9350602085015191508082111562000285578283fd5b50620002948582860162000184565b9150509250929050565b600181811c90821680620002b357607f821691505b60208210811415620002d557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612f5c80620003016000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c8063715018a611610125578063a8ee88b7116100ad578063d204c45e1161007c578063d204c45e146104f7578063e985e9c51461050a578063ef60ceaf1461051d578063f2fde38b14610530578063f6dda9361461054357600080fd5b8063a8ee88b7146104ab578063b88d4fde146104be578063c87b56dd146104d1578063d0def521146104e457600080fd5b80638da5cb5b116100f45780638da5cb5b1461045f57806395d89b4114610470578063996afea914610478578063a22cb4651461048b578063a7d73a5d1461049e57600080fd5b8063715018a6146103fa578063724b5dd7146104025780637885fdc7146104155780637e9803421461045757600080fd5b8063407c368a116101a85780634f558e79116101775780634f558e79146103975780635136dcc7146103aa57806361bc221a146103bd5780636352211e146103d457806370a08231146103e757600080fd5b8063407c368a1461034b57806342525ba41461035e57806342842e0e1461037157806342966c681461038457600080fd5b8063095ea7b3116101ef578063095ea7b3146102cb57806323b872dd146102e05780632a55205a146102f357806331a997661461032557806338400d811461033857600080fd5b806301ffc9a7146102215780630653aca51461024957806306fdde031461028b578063081812fc146102a0575b600080fd5b61023461022f366004612a96565b610556565b60405190151581526020015b60405180910390f35b61025c610257366004612a7e565b610567565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610240565b6102936105ec565b6040516102409190612c8c565b6102b36102ae366004612a7e565b61067e565b6040516001600160a01b039091168152602001610240565b6102de6102d936600461293a565b610718565b005b6102de6102ee3660046126be565b61082e565b610306610301366004612be3565b61085f565b604080516001600160a01b039093168352602083019190915201610240565b610293610333366004612a7e565b610924565b6102de610346366004612ace565b6109c6565b6102de610359366004612a7e565b6109fc565b6102de61036c366004612963565b610c61565b6102de61037f3660046126be565b610d82565b6102de610392366004612a7e565b610d9d565b6102346103a5366004612a7e565b610da9565b6102de6103b8366004612a0e565b610dc8565b6103c6600c5481565b604051908152602001610240565b6102b36103e2366004612a7e565b610e51565b6103c66103f5366004612672565b610ec8565b6102de610f4f565b6102de610410366004612a7e565b610f85565b600054610435906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff909116602083015201610240565b6103c6610fb4565b600a546001600160a01b03166102b3565b610293610fc5565b6103c6610486366004612963565b610fd4565b6102de61049936600461275f565b611259565b600e546102349060ff1681565b6102de6104b9366004612836565b611264565b6102de6104cc3660046126f9565b6112f8565b6102936104df366004612a7e565b611330565b6102de6104f2366004612799565b6113e5565b6102de6105053660046127ea565b61143c565b61023461051836600461268c565b611485565b6102de61052b366004612b72565b6114b3565b6102de61053e366004612672565b6114f4565b6102de6105513660046128c9565b61158c565b6000610561826115d6565b92915050565b604080516060810182526000808252602082018190529181018290529061058f600284611616565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b6060600480546105fb90612e94565b80601f016020809104026020016040519081016040528092919081815260200182805461062790612e94565b80156106745780601f1061064957610100808354040283529160200191610674565b820191906000526020600020905b81548152906001019060200180831161065757829003601f168201915b5050505050905090565b6000818152600660205260408120546001600160a01b03166106fc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b600061072382610e51565b9050806001600160a01b0316836001600160a01b031614156107915760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106f3565b336001600160a01b03821614806107ad57506107ad8133611485565b61081f5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106f3565b6108298383611629565b505050565b6108383382611697565b6108545760405162461bcd60e51b81526004016106f390612d26565b61082983838361176e565b60008281526001602052604081205481906001600160a01b0316156108c4576000848152600160205260409020546001600160a01b03811690612710906108b190600160a01b900461ffff1686612e5e565b6108bb9190612e3e565b9150915061091d565b6000546001600160a01b0316158015906108ea5750600054600160a01b900461ffff1615155b15610916576000546001600160a01b03811690612710906108b190600160a01b900461ffff1686612e5e565b5060009050805b9250929050565b6000818152600d6020526040902080546060919061094190612e94565b80601f016020809104026020016040519081016040528092919081815260200182805461096d90612e94565b80156109ba5780601f1061098f576101008083540402835291602001916109ba565b820191906000526020600020905b81548152906001019060200180831161099d57829003601f168201915b50505050509050919050565b600a546001600160a01b031633146109f05760405162461bcd60e51b81526004016106f390612cf1565b610829600f8383612475565b600a546001600160a01b03163314610a265760405162461bcd60e51b81526004016106f390612cf1565b600081815260116020526040812080546001820154600290920180546001600160a01b039092169391610a5890612e94565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8490612e94565b8015610ad15780601f10610aa657610100808354040283529160200191610ad1565b820191906000526020600020905b815481529060010190602001808311610ab457829003601f168201915b50505060008781526011602052604081206003810154600490910180549596506001600160a01b03821695600160a01b90920461ffff169450919250610b1690612e94565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4290612e94565b8015610b8f5780601f10610b6457610100808354040283529160200191610b8f565b820191906000526020600020905b815481529060010190602001808311610b7257829003601f168201915b5050505050905060008511610bfb5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642062617463684964206f7220616c7265616479206d696e746560448201526b6420616c6c20746f6b656e7360a01b60648201526084016106f3565b6000600c546001610c0c9190612e26565b90506000601054871015610c21575085610c46565b50601054610c2f8188612e7d565b60008a815260116020526040902060010181905596505b610c5689838a848a8a8a8a61190e565b505050505050505050565b600a546001600160a01b03163314610c8b5760405162461bcd60e51b81526004016106f390612cf1565b6000600c546001610c9c9190612e26565b905060005b88811015610d3357610d218a89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981528c93508b9250908a908a90819084018382808284376000920191909152506119cf92505050565b80610d2b81612ec9565b915050610ca1565b507fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d81898b8a8a8a8a604051610d6f9796959493929190612dc2565b60405180910390a1505050505050505050565b610829838383604051806020016040528060008152506112f8565b610da681611abe565b50565b6000818152600660205260408120546001600160a01b03161515610561565b600a546001600160a01b03163314610df25760405162461bcd60e51b81526004016106f390612cf1565b610e4d8282808060200260200160405190810160405280939291908181526020016000905b82821015610e4357610e3460608302860136819003810190612b0e565b81526020019060010190610e17565b5050505050611b59565b5050565b6000818152600660205260408120546001600160a01b0316806105615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106f3565b60006001600160a01b038216610f335760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106f3565b506001600160a01b031660009081526007602052604090205490565b600a546001600160a01b03163314610f795760405162461bcd60e51b81526004016106f390612cf1565b610f836000611d2c565b565b600a546001600160a01b03163314610faf5760405162461bcd60e51b81526004016106f390612cf1565b601055565b6000610fc06002611d7e565b905090565b6060600580546105fb90612e94565b600a546000906001600160a01b031633146110015760405162461bcd60e51b81526004016106f390612cf1565b6000600c5460016110129190612e26565b6040805130602082015290810182905290915060600160405160208183030381529060405280519060200120915060006010548a10156110535750886111c1565b50601054611061818b612e7d565b99506040518060c001604052808c6001600160a01b031681526020018b81526020018a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506001600160a01b03891660208083019190915261ffff89166040808401919091528051601f8901839004830281018301909152878152606090920191908890889081908401838280828437600092018290525093909452505085815260116020908152604091829020845181546001600160a01b0319166001600160a01b0390911617815584820151600182015591840151805192935061116692600285019291909101906124f9565b506060820151600382018054608085015161ffff16600160a01b026001600160b01b03199091166001600160a01b039093169290921791909117905560a082015180516111bd9160048401916020909101906124f9565b5050505b61124b83838d848d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061190e92505050565b505098975050505050505050565b610e4d338383611d88565b600a546001600160a01b0316331461128e5760405162461bcd60e51b81526004016106f390612cf1565b6000600c54600161129f9190612e26565b90506112ae86868686866119cf565b7fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d816001888888886040516112e896959493929190612d77565b60405180910390a1505050505050565b6113023383611697565b61131e5760405162461bcd60e51b81526004016106f390612d26565b61132a84848484611e57565b50505050565b6000818152600660205260409020546060906001600160a01b03166113af5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106f3565b600e5460ff16156113c757600f805461094190612e94565b6000828152600b60205260409020805461094190612e94565b919050565b600c546113f3906001612e26565b600c8190555061082983600c5484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e8a92505050565b600a546001600160a01b031633146114665760405162461bcd60e51b81526004016106f390612cf1565b600c54611474906001612e26565b600c819055610e4d90839083611eb3565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b600a546001600160a01b031633146114dd5760405162461bcd60e51b81526004016106f390612cf1565b610da66114ef36839003830183612b89565b611ebd565b600a546001600160a01b0316331461151e5760405162461bcd60e51b81526004016106f390612cf1565b6001600160a01b0381166115835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f3565b610da681611d2c565b600a546001600160a01b031633146115b65760405162461bcd60e51b81526004016106f390612cf1565b600c546115c4906001612e26565b600c8190556108299084908484611fa0565b60006001600160e01b031982166380ac58cd60e01b148061160757506001600160e01b03198216635b5e139f60e01b145b80610561575061056182611fd1565b60006116228383612021565b9392505050565b600081815260086020526040902080546001600160a01b0319166001600160a01b038416908117909155819061165e82610e51565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600660205260408120546001600160a01b03166117105760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106f3565b600061171b83610e51565b9050806001600160a01b0316846001600160a01b031614806117565750836001600160a01b031661174b8461067e565b6001600160a01b0316145b8061176657506117668185611485565b949350505050565b826001600160a01b031661178182610e51565b6001600160a01b0316146117e95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106f3565b6001600160a01b03821661184b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106f3565b611856600082611629565b6001600160a01b038316600090815260076020526040812080546001929061187f908490612e7d565b90915550506001600160a01b03821660009081526007602052604081208054600192906118ad908490612e26565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60005b858110156119385761192687868686866119cf565b8061193081612ec9565b915050611911565b507fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d87868887878760405161197296959493929190612d77565b60405180910390a17fc8b492c15c10bfe2e3f0d48e3d1f16cbced2b3e0a9ef24724baa8c0f1243148088886119a78882612e26565b6040805193845260208401929092529082015260600160405180910390a15050505050505050565b600c546119dd906001612e26565b600c8190556119ee90869086611e8a565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611a055790505090506040518060600160405280600c548152602001856001600160a01b031681526020018461ffff1681525081600081518110611a7f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a9381611b59565b600c546000908152600d602090815260409091208351611ab5928501906124f9565b50505050505050565b6000611ac982610e51565b9050611ad6600083611629565b6001600160a01b0381166000908152600760205260408120805460019290611aff908490612e7d565b909155505060008281526006602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60005b8151811015610e4d576000828281518110611b8757634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff1610611bd85760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016106f3565b60208101516001600160a01b0316611c51578051600090815260016020526040902080546001600160b01b03191690558051611c1690600290612059565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611d19565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611cbf90600290612065565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611d2481612ec9565b915050611b5c565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610561825490565b816001600160a01b0316836001600160a01b03161415611dea5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106f3565b6001600160a01b03838116600081815260096020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e6284848461176e565b611e6e84848484612071565b61132a5760405162461bcd60e51b81526004016106f390612c9f565b611e94838361217e565b6000828152600b60209081526040909120825161132a928401906124f9565b611e9483836122c0565b612710816020015161ffff1610611f045760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016106f3565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe4192611f9592916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b611fab8484836122d6565b6000838152600b602090815260409091208351611fca928501906124f9565b5050505050565b60006001600160e01b0319821663152a902d60e11b148061200257506001600160e01b0319821663c69dbd8f60e01b145b8061056157506301ffc9a760e01b6001600160e01b0319831614610561565b600082600001828154811061204657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006116228383612309565b60006116228383612426565b60006001600160a01b0384163b1561217357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906120b5903390899088908890600401612c4f565b602060405180830381600087803b1580156120cf57600080fd5b505af19250505080156120ff575060408051601f3d908101601f191682019092526120fc91810190612ab2565b60015b612159573d80801561212d576040519150601f19603f3d011682016040523d82523d6000602084013e612132565b606091505b5080516121515760405162461bcd60e51b81526004016106f390612c9f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611766565b506001949350505050565b6001600160a01b0382166121d45760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106f3565b6000818152600660205260409020546001600160a01b0316156122395760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106f3565b6001600160a01b0382166000908152600760205260408120805460019290612262908490612e26565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610e4d8282604051806020016040528060008152505b6122e0838361217e565b6122ed6000848484612071565b6108295760405162461bcd60e51b81526004016106f390612c9f565b6000818152600183016020526040812054801561241c57600061232d600183612e7d565b855490915060009061234190600190612e7d565b90508181146123c257600086600001828154811061236f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106123a057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806123e157634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610561565b6000915050610561565b600081815260018301602052604081205461246d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610561565b506000610561565b82805461248190612e94565b90600052602060002090601f0160209004810192826124a357600085556124e9565b82601f106124bc5782800160ff198235161785556124e9565b828001600101855582156124e9579182015b828111156124e95782358255916020019190600101906124ce565b506124f592915061256d565b5090565b82805461250590612e94565b90600052602060002090601f01602090048101928261252757600085556124e9565b82601f1061254057805160ff19168380011785556124e9565b828001600101855582156124e9579182015b828111156124e9578251825591602001919060010190612552565b5b808211156124f5576000815560010161256e565b80356001600160a01b03811681146113e057600080fd5b600082601f8301126125a9578081fd5b813567ffffffffffffffff808211156125c4576125c4612efa565b604051601f8301601f19908116603f011681019082821181831017156125ec576125ec612efa565b81604052838152866020858801011115612604578485fd5b8360208701602083013792830160200193909352509392505050565b60008083601f840112612631578182fd5b50813567ffffffffffffffff811115612648578182fd5b60208301915083602082850101111561091d57600080fd5b803561ffff811681146113e057600080fd5b600060208284031215612683578081fd5b61162282612582565b6000806040838503121561269e578081fd5b6126a783612582565b91506126b560208401612582565b90509250929050565b6000806000606084860312156126d2578081fd5b6126db84612582565b92506126e960208501612582565b9150604084013590509250925092565b6000806000806080858703121561270e578081fd5b61271785612582565b935061272560208601612582565b925060408501359150606085013567ffffffffffffffff811115612747578182fd5b61275387828801612599565b91505092959194509250565b60008060408385031215612771578182fd5b61277a83612582565b91506020830135801515811461278e578182fd5b809150509250929050565b6000806000604084860312156127ad578283fd5b6127b684612582565b9250602084013567ffffffffffffffff8111156127d1578283fd5b6127dd86828701612620565b9497909650939450505050565b600080604083850312156127fc578182fd5b61280583612582565b9150602083013567ffffffffffffffff811115612820578182fd5b61282c85828601612599565b9150509250929050565b600080600080600060a0868803121561284d578081fd5b61285686612582565b9450602086013567ffffffffffffffff80821115612872578283fd5b61287e89838a01612599565b955061288c60408901612582565b945061289a60608901612660565b935060808801359150808211156128af578283fd5b506128bc88828901612599565b9150509295509295909350565b6000806000606084860312156128dd578081fd5b6128e684612582565b9250602084013567ffffffffffffffff80821115612902578283fd5b61290e87838801612599565b93506040860135915080821115612923578283fd5b5061293086828701612599565b9150509250925092565b6000806040838503121561294c578182fd5b61295583612582565b946020939093013593505050565b60008060008060008060008060c0898b03121561297e578586fd5b61298789612582565b975060208901359650604089013567ffffffffffffffff808211156129aa578788fd5b6129b68c838d01612620565b90985096508691506129ca60608c01612582565b95506129d860808c01612660565b945060a08b01359150808211156129ed578384fd5b506129fa8b828c01612620565b999c989b5096995094979396929594505050565b60008060208385031215612a20578182fd5b823567ffffffffffffffff80821115612a37578384fd5b818501915085601f830112612a4a578384fd5b813581811115612a58578485fd5b866020606083028501011115612a6c578485fd5b60209290920196919550909350505050565b600060208284031215612a8f578081fd5b5035919050565b600060208284031215612aa7578081fd5b813561162281612f10565b600060208284031215612ac3578081fd5b815161162281612f10565b60008060208385031215612ae0578182fd5b823567ffffffffffffffff811115612af6578283fd5b612b0285828601612620565b90969095509350505050565b600060608284031215612b1f578081fd5b6040516060810181811067ffffffffffffffff82111715612b4257612b42612efa565b60405282358152612b5560208401612582565b6020820152612b6660408401612660565b60408201529392505050565b600060408284031215612b83578081fd5b50919050565b600060408284031215612b9a578081fd5b6040516040810181811067ffffffffffffffff82111715612bbd57612bbd612efa565b604052612bc983612582565b8152612bd760208401612660565b60208201529392505050565b60008060408385031215612bf5578182fd5b50508035926020909101359150565b60008151808452815b81811015612c2957602081850181015186830182015201612c0d565b81811115612c3a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c8290830184612c04565b9695505050505050565b6020815260006116226020830184612c04565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b868152856020820152600060018060a01b03808716604084015260c06060840152612da560c0840187612c04565b941660808301525061ffff9190911660a090910152949350505050565b878152866020820152600060018060a01b03808816604084015260c060608401528560c0840152858760e08501378160e0878501015260e0601f19601f880116840101915080851660808401525061ffff831660a083015298975050505050505050565b60008219821115612e3957612e39612ee4565b500190565b600082612e5957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612e7857612e78612ee4565b500290565b600082821015612e8f57612e8f612ee4565b500390565b600181811c90821680612ea857607f821691505b60208210811415612b8357634e487b7160e01b600052602260045260246000fd5b6000600019821415612edd57612edd612ee4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610da657600080fdfea2646970667358221220b22108da3e117b2afdf8a2c92a7a459a7dd576ad62fea8e5ea5002457d7e3a4164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c8063715018a611610125578063a8ee88b7116100ad578063d204c45e1161007c578063d204c45e146104f7578063e985e9c51461050a578063ef60ceaf1461051d578063f2fde38b14610530578063f6dda9361461054357600080fd5b8063a8ee88b7146104ab578063b88d4fde146104be578063c87b56dd146104d1578063d0def521146104e457600080fd5b80638da5cb5b116100f45780638da5cb5b1461045f57806395d89b4114610470578063996afea914610478578063a22cb4651461048b578063a7d73a5d1461049e57600080fd5b8063715018a6146103fa578063724b5dd7146104025780637885fdc7146104155780637e9803421461045757600080fd5b8063407c368a116101a85780634f558e79116101775780634f558e79146103975780635136dcc7146103aa57806361bc221a146103bd5780636352211e146103d457806370a08231146103e757600080fd5b8063407c368a1461034b57806342525ba41461035e57806342842e0e1461037157806342966c681461038457600080fd5b8063095ea7b3116101ef578063095ea7b3146102cb57806323b872dd146102e05780632a55205a146102f357806331a997661461032557806338400d811461033857600080fd5b806301ffc9a7146102215780630653aca51461024957806306fdde031461028b578063081812fc146102a0575b600080fd5b61023461022f366004612a96565b610556565b60405190151581526020015b60405180910390f35b61025c610257366004612a7e565b610567565b60408051825181526020808401516001600160a01b0316908201529181015161ffff1690820152606001610240565b6102936105ec565b6040516102409190612c8c565b6102b36102ae366004612a7e565b61067e565b6040516001600160a01b039091168152602001610240565b6102de6102d936600461293a565b610718565b005b6102de6102ee3660046126be565b61082e565b610306610301366004612be3565b61085f565b604080516001600160a01b039093168352602083019190915201610240565b610293610333366004612a7e565b610924565b6102de610346366004612ace565b6109c6565b6102de610359366004612a7e565b6109fc565b6102de61036c366004612963565b610c61565b6102de61037f3660046126be565b610d82565b6102de610392366004612a7e565b610d9d565b6102346103a5366004612a7e565b610da9565b6102de6103b8366004612a0e565b610dc8565b6103c6600c5481565b604051908152602001610240565b6102b36103e2366004612a7e565b610e51565b6103c66103f5366004612672565b610ec8565b6102de610f4f565b6102de610410366004612a7e565b610f85565b600054610435906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff909116602083015201610240565b6103c6610fb4565b600a546001600160a01b03166102b3565b610293610fc5565b6103c6610486366004612963565b610fd4565b6102de61049936600461275f565b611259565b600e546102349060ff1681565b6102de6104b9366004612836565b611264565b6102de6104cc3660046126f9565b6112f8565b6102936104df366004612a7e565b611330565b6102de6104f2366004612799565b6113e5565b6102de6105053660046127ea565b61143c565b61023461051836600461268c565b611485565b6102de61052b366004612b72565b6114b3565b6102de61053e366004612672565b6114f4565b6102de6105513660046128c9565b61158c565b6000610561826115d6565b92915050565b604080516060810182526000808252602082018190529181018290529061058f600284611616565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b6060600480546105fb90612e94565b80601f016020809104026020016040519081016040528092919081815260200182805461062790612e94565b80156106745780601f1061064957610100808354040283529160200191610674565b820191906000526020600020905b81548152906001019060200180831161065757829003601f168201915b5050505050905090565b6000818152600660205260408120546001600160a01b03166106fc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b600061072382610e51565b9050806001600160a01b0316836001600160a01b031614156107915760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106f3565b336001600160a01b03821614806107ad57506107ad8133611485565b61081f5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106f3565b6108298383611629565b505050565b6108383382611697565b6108545760405162461bcd60e51b81526004016106f390612d26565b61082983838361176e565b60008281526001602052604081205481906001600160a01b0316156108c4576000848152600160205260409020546001600160a01b03811690612710906108b190600160a01b900461ffff1686612e5e565b6108bb9190612e3e565b9150915061091d565b6000546001600160a01b0316158015906108ea5750600054600160a01b900461ffff1615155b15610916576000546001600160a01b03811690612710906108b190600160a01b900461ffff1686612e5e565b5060009050805b9250929050565b6000818152600d6020526040902080546060919061094190612e94565b80601f016020809104026020016040519081016040528092919081815260200182805461096d90612e94565b80156109ba5780601f1061098f576101008083540402835291602001916109ba565b820191906000526020600020905b81548152906001019060200180831161099d57829003601f168201915b50505050509050919050565b600a546001600160a01b031633146109f05760405162461bcd60e51b81526004016106f390612cf1565b610829600f8383612475565b600a546001600160a01b03163314610a265760405162461bcd60e51b81526004016106f390612cf1565b600081815260116020526040812080546001820154600290920180546001600160a01b039092169391610a5890612e94565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8490612e94565b8015610ad15780601f10610aa657610100808354040283529160200191610ad1565b820191906000526020600020905b815481529060010190602001808311610ab457829003601f168201915b50505060008781526011602052604081206003810154600490910180549596506001600160a01b03821695600160a01b90920461ffff169450919250610b1690612e94565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4290612e94565b8015610b8f5780601f10610b6457610100808354040283529160200191610b8f565b820191906000526020600020905b815481529060010190602001808311610b7257829003601f168201915b5050505050905060008511610bfb5760405162461bcd60e51b815260206004820152602c60248201527f496e76616c69642062617463684964206f7220616c7265616479206d696e746560448201526b6420616c6c20746f6b656e7360a01b60648201526084016106f3565b6000600c546001610c0c9190612e26565b90506000601054871015610c21575085610c46565b50601054610c2f8188612e7d565b60008a815260116020526040902060010181905596505b610c5689838a848a8a8a8a61190e565b505050505050505050565b600a546001600160a01b03163314610c8b5760405162461bcd60e51b81526004016106f390612cf1565b6000600c546001610c9c9190612e26565b905060005b88811015610d3357610d218a89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981528c93508b9250908a908a90819084018382808284376000920191909152506119cf92505050565b80610d2b81612ec9565b915050610ca1565b507fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d81898b8a8a8a8a604051610d6f9796959493929190612dc2565b60405180910390a1505050505050505050565b610829838383604051806020016040528060008152506112f8565b610da681611abe565b50565b6000818152600660205260408120546001600160a01b03161515610561565b600a546001600160a01b03163314610df25760405162461bcd60e51b81526004016106f390612cf1565b610e4d8282808060200260200160405190810160405280939291908181526020016000905b82821015610e4357610e3460608302860136819003810190612b0e565b81526020019060010190610e17565b5050505050611b59565b5050565b6000818152600660205260408120546001600160a01b0316806105615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106f3565b60006001600160a01b038216610f335760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106f3565b506001600160a01b031660009081526007602052604090205490565b600a546001600160a01b03163314610f795760405162461bcd60e51b81526004016106f390612cf1565b610f836000611d2c565b565b600a546001600160a01b03163314610faf5760405162461bcd60e51b81526004016106f390612cf1565b601055565b6000610fc06002611d7e565b905090565b6060600580546105fb90612e94565b600a546000906001600160a01b031633146110015760405162461bcd60e51b81526004016106f390612cf1565b6000600c5460016110129190612e26565b6040805130602082015290810182905290915060600160405160208183030381529060405280519060200120915060006010548a10156110535750886111c1565b50601054611061818b612e7d565b99506040518060c001604052808c6001600160a01b031681526020018b81526020018a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506001600160a01b03891660208083019190915261ffff89166040808401919091528051601f8901839004830281018301909152878152606090920191908890889081908401838280828437600092018290525093909452505085815260116020908152604091829020845181546001600160a01b0319166001600160a01b0390911617815584820151600182015591840151805192935061116692600285019291909101906124f9565b506060820151600382018054608085015161ffff16600160a01b026001600160b01b03199091166001600160a01b039093169290921791909117905560a082015180516111bd9160048401916020909101906124f9565b5050505b61124b83838d848d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061190e92505050565b505098975050505050505050565b610e4d338383611d88565b600a546001600160a01b0316331461128e5760405162461bcd60e51b81526004016106f390612cf1565b6000600c54600161129f9190612e26565b90506112ae86868686866119cf565b7fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d816001888888886040516112e896959493929190612d77565b60405180910390a1505050505050565b6113023383611697565b61131e5760405162461bcd60e51b81526004016106f390612d26565b61132a84848484611e57565b50505050565b6000818152600660205260409020546060906001600160a01b03166113af5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106f3565b600e5460ff16156113c757600f805461094190612e94565b6000828152600b60205260409020805461094190612e94565b919050565b600c546113f3906001612e26565b600c8190555061082983600c5484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e8a92505050565b600a546001600160a01b031633146114665760405162461bcd60e51b81526004016106f390612cf1565b600c54611474906001612e26565b600c819055610e4d90839083611eb3565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b600a546001600160a01b031633146114dd5760405162461bcd60e51b81526004016106f390612cf1565b610da66114ef36839003830183612b89565b611ebd565b600a546001600160a01b0316331461151e5760405162461bcd60e51b81526004016106f390612cf1565b6001600160a01b0381166115835760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f3565b610da681611d2c565b600a546001600160a01b031633146115b65760405162461bcd60e51b81526004016106f390612cf1565b600c546115c4906001612e26565b600c8190556108299084908484611fa0565b60006001600160e01b031982166380ac58cd60e01b148061160757506001600160e01b03198216635b5e139f60e01b145b80610561575061056182611fd1565b60006116228383612021565b9392505050565b600081815260086020526040902080546001600160a01b0319166001600160a01b038416908117909155819061165e82610e51565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600660205260408120546001600160a01b03166117105760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106f3565b600061171b83610e51565b9050806001600160a01b0316846001600160a01b031614806117565750836001600160a01b031661174b8461067e565b6001600160a01b0316145b8061176657506117668185611485565b949350505050565b826001600160a01b031661178182610e51565b6001600160a01b0316146117e95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106f3565b6001600160a01b03821661184b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106f3565b611856600082611629565b6001600160a01b038316600090815260076020526040812080546001929061187f908490612e7d565b90915550506001600160a01b03821660009081526007602052604081208054600192906118ad908490612e26565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60005b858110156119385761192687868686866119cf565b8061193081612ec9565b915050611911565b507fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d87868887878760405161197296959493929190612d77565b60405180910390a17fc8b492c15c10bfe2e3f0d48e3d1f16cbced2b3e0a9ef24724baa8c0f1243148088886119a78882612e26565b6040805193845260208401929092529082015260600160405180910390a15050505050505050565b600c546119dd906001612e26565b600c8190556119ee90869086611e8a565b604080516001808252818301909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181611a055790505090506040518060600160405280600c548152602001856001600160a01b031681526020018461ffff1681525081600081518110611a7f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250611a9381611b59565b600c546000908152600d602090815260409091208351611ab5928501906124f9565b50505050505050565b6000611ac982610e51565b9050611ad6600083611629565b6001600160a01b0381166000908152600760205260408120805460019290611aff908490612e7d565b909155505060008281526006602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60005b8151811015610e4d576000828281518110611b8757634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff1610611bd85760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016106f3565b60208101516001600160a01b0316611c51578051600090815260016020526040902080546001600160b01b03191690558051611c1690600290612059565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a1611d19565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b03199094169116179190911790558051611cbf90600290612065565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b5080611d2481612ec9565b915050611b5c565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610561825490565b816001600160a01b0316836001600160a01b03161415611dea5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106f3565b6001600160a01b03838116600081815260096020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e6284848461176e565b611e6e84848484612071565b61132a5760405162461bcd60e51b81526004016106f390612c9f565b611e94838361217e565b6000828152600b60209081526040909120825161132a928401906124f9565b611e9483836122c0565b612710816020015161ffff1610611f045760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b60448201526064016106f3565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe4192611f9592916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b611fab8484836122d6565b6000838152600b602090815260409091208351611fca928501906124f9565b5050505050565b60006001600160e01b0319821663152a902d60e11b148061200257506001600160e01b0319821663c69dbd8f60e01b145b8061056157506301ffc9a760e01b6001600160e01b0319831614610561565b600082600001828154811061204657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006116228383612309565b60006116228383612426565b60006001600160a01b0384163b1561217357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906120b5903390899088908890600401612c4f565b602060405180830381600087803b1580156120cf57600080fd5b505af19250505080156120ff575060408051601f3d908101601f191682019092526120fc91810190612ab2565b60015b612159573d80801561212d576040519150601f19603f3d011682016040523d82523d6000602084013e612132565b606091505b5080516121515760405162461bcd60e51b81526004016106f390612c9f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611766565b506001949350505050565b6001600160a01b0382166121d45760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106f3565b6000818152600660205260409020546001600160a01b0316156122395760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106f3565b6001600160a01b0382166000908152600760205260408120805460019290612262908490612e26565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610e4d8282604051806020016040528060008152505b6122e0838361217e565b6122ed6000848484612071565b6108295760405162461bcd60e51b81526004016106f390612c9f565b6000818152600183016020526040812054801561241c57600061232d600183612e7d565b855490915060009061234190600190612e7d565b90508181146123c257600086600001828154811061236f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106123a057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806123e157634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610561565b6000915050610561565b600081815260018301602052604081205461246d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610561565b506000610561565b82805461248190612e94565b90600052602060002090601f0160209004810192826124a357600085556124e9565b82601f106124bc5782800160ff198235161785556124e9565b828001600101855582156124e9579182015b828111156124e95782358255916020019190600101906124ce565b506124f592915061256d565b5090565b82805461250590612e94565b90600052602060002090601f01602090048101928261252757600085556124e9565b82601f1061254057805160ff19168380011785556124e9565b828001600101855582156124e9579182015b828111156124e9578251825591602001919060010190612552565b5b808211156124f5576000815560010161256e565b80356001600160a01b03811681146113e057600080fd5b600082601f8301126125a9578081fd5b813567ffffffffffffffff808211156125c4576125c4612efa565b604051601f8301601f19908116603f011681019082821181831017156125ec576125ec612efa565b81604052838152866020858801011115612604578485fd5b8360208701602083013792830160200193909352509392505050565b60008083601f840112612631578182fd5b50813567ffffffffffffffff811115612648578182fd5b60208301915083602082850101111561091d57600080fd5b803561ffff811681146113e057600080fd5b600060208284031215612683578081fd5b61162282612582565b6000806040838503121561269e578081fd5b6126a783612582565b91506126b560208401612582565b90509250929050565b6000806000606084860312156126d2578081fd5b6126db84612582565b92506126e960208501612582565b9150604084013590509250925092565b6000806000806080858703121561270e578081fd5b61271785612582565b935061272560208601612582565b925060408501359150606085013567ffffffffffffffff811115612747578182fd5b61275387828801612599565b91505092959194509250565b60008060408385031215612771578182fd5b61277a83612582565b91506020830135801515811461278e578182fd5b809150509250929050565b6000806000604084860312156127ad578283fd5b6127b684612582565b9250602084013567ffffffffffffffff8111156127d1578283fd5b6127dd86828701612620565b9497909650939450505050565b600080604083850312156127fc578182fd5b61280583612582565b9150602083013567ffffffffffffffff811115612820578182fd5b61282c85828601612599565b9150509250929050565b600080600080600060a0868803121561284d578081fd5b61285686612582565b9450602086013567ffffffffffffffff80821115612872578283fd5b61287e89838a01612599565b955061288c60408901612582565b945061289a60608901612660565b935060808801359150808211156128af578283fd5b506128bc88828901612599565b9150509295509295909350565b6000806000606084860312156128dd578081fd5b6128e684612582565b9250602084013567ffffffffffffffff80821115612902578283fd5b61290e87838801612599565b93506040860135915080821115612923578283fd5b5061293086828701612599565b9150509250925092565b6000806040838503121561294c578182fd5b61295583612582565b946020939093013593505050565b60008060008060008060008060c0898b03121561297e578586fd5b61298789612582565b975060208901359650604089013567ffffffffffffffff808211156129aa578788fd5b6129b68c838d01612620565b90985096508691506129ca60608c01612582565b95506129d860808c01612660565b945060a08b01359150808211156129ed578384fd5b506129fa8b828c01612620565b999c989b5096995094979396929594505050565b60008060208385031215612a20578182fd5b823567ffffffffffffffff80821115612a37578384fd5b818501915085601f830112612a4a578384fd5b813581811115612a58578485fd5b866020606083028501011115612a6c578485fd5b60209290920196919550909350505050565b600060208284031215612a8f578081fd5b5035919050565b600060208284031215612aa7578081fd5b813561162281612f10565b600060208284031215612ac3578081fd5b815161162281612f10565b60008060208385031215612ae0578182fd5b823567ffffffffffffffff811115612af6578283fd5b612b0285828601612620565b90969095509350505050565b600060608284031215612b1f578081fd5b6040516060810181811067ffffffffffffffff82111715612b4257612b42612efa565b60405282358152612b5560208401612582565b6020820152612b6660408401612660565b60408201529392505050565b600060408284031215612b83578081fd5b50919050565b600060408284031215612b9a578081fd5b6040516040810181811067ffffffffffffffff82111715612bbd57612bbd612efa565b604052612bc983612582565b8152612bd760208401612660565b60208201529392505050565b60008060408385031215612bf5578182fd5b50508035926020909101359150565b60008151808452815b81811015612c2957602081850181015186830182015201612c0d565b81811115612c3a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c8290830184612c04565b9695505050505050565b6020815260006116226020830184612c04565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b868152856020820152600060018060a01b03808716604084015260c06060840152612da560c0840187612c04565b941660808301525061ffff9190911660a090910152949350505050565b878152866020820152600060018060a01b03808816604084015260c060608401528560c0840152858760e08501378160e0878501015260e0601f19601f880116840101915080851660808401525061ffff831660a083015298975050505050505050565b60008219821115612e3957612e39612ee4565b500190565b600082612e5957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612e7857612e78612ee4565b500290565b600082821015612e8f57612e8f612ee4565b500390565b600181811c90821680612ea857607f821691505b60208210811415612b8357634e487b7160e01b600052602260045260246000fd5b6000600019821415612edd57612edd612ee4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610da657600080fdfea2646970667358221220b22108da3e117b2afdf8a2c92a7a459a7dd576ad62fea8e5ea5002457d7e3a4164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getTokenRoyaltiesCount()": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}."
      },
      "getTokenRoyaltyByIndex(uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IEIP2981RoyaltyOverride-royaltyInfo}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setDefaultRoyalty((address,uint16))": {
        "details": "Set a default royalty configuration.  Will be used if no token specific configuration is set"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_batchData": {
        "details": "batch ID => batch data"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3116,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "defaultRoyalty",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(TokenRoyalty)3425_storage"
      },
      {
        "astId": 3121,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_tokenRoyalties",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(TokenRoyalty)3425_storage)"
      },
      {
        "astId": 3124,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_tokensWithRoyalties",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)2225_storage"
      },
      {
        "astId": 232,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 234,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 238,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_owners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 242,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_balances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 246,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 252,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2370,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "tokenToUri",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2372,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "counter",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2376,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_proofOfAuthenticity",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2400,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "internalURIEnabled",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2402,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_internalURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 2404,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_maxMintQty",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2410,
        "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
        "label": "_batchData",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_struct(BatchData)2423_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(BatchData)2423_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ERC721WithRoyalty.BatchData)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchData)2423_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenRoyalty)3425_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC721WithRoyalty.TokenRoyalty)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenRoyalty)3425_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BatchData)2423_storage": {
        "encoding": "inplace",
        "label": "struct ERC721WithRoyalty.BatchData",
        "members": [
          {
            "astId": 2412,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "to",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2414,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "remainingQtyToMint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2416,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2418,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "royaltyAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2420,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "bps",
            "offset": 20,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 2422,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "proofOfAuthenticity",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)1767_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1762,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1766,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenRoyalty)3425_storage": {
        "encoding": "inplace",
        "label": "struct IERC721WithRoyalty.TokenRoyalty",
        "members": [
          {
            "astId": 3422,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3424,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "bps",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(UintSet)2225_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2224,
            "contract": "contracts/ERC721WithRoyalty.sol:ERC721WithRoyalty",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1767_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}